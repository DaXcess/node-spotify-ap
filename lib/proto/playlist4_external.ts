// @generated by protobuf-ts 2.0.6
// @generated from protobuf file "playlist4_external.proto" (package "spotify.playlist4.proto", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spotify.playlist4.proto.Item
 */
export interface Item {
    /**
     * @generated from protobuf field: string uri = 1;
     */
    uri: string;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.ItemAttributes attributes = 2;
     */
    attributes?: ItemAttributes;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.MetaItem
 */
export interface MetaItem {
    /**
     * @generated from protobuf field: optional bytes revision = 1;
     */
    revision?: Uint8Array;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.ListAttributes attributes = 2;
     */
    attributes?: ListAttributes;
    /**
     * @generated from protobuf field: optional int32 length = 3;
     */
    length?: number;
    /**
     * @generated from protobuf field: optional int64 timestamp = 4;
     */
    timestamp?: bigint;
    /**
     * @generated from protobuf field: optional string owner_username = 5;
     */
    ownerUsername?: string;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.ListItems
 */
export interface ListItems {
    /**
     * @generated from protobuf field: int32 pos = 1;
     */
    pos: number;
    /**
     * @generated from protobuf field: bool truncated = 2;
     */
    truncated: boolean;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.Item items = 3;
     */
    items: Item[];
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.MetaItem meta_items = 4;
     */
    metaItems: MetaItem[];
}
/**
 * @generated from protobuf message spotify.playlist4.proto.FormatListAttribute
 */
export interface FormatListAttribute {
    /**
     * @generated from protobuf field: optional string key = 1;
     */
    key?: string;
    /**
     * @generated from protobuf field: optional string value = 2;
     */
    value?: string;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.ListAttributes
 */
export interface ListAttributes {
    /**
     * @generated from protobuf field: optional string name = 1;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string description = 2;
     */
    description?: string;
    /**
     * @generated from protobuf field: optional bytes picture = 3;
     */
    picture?: Uint8Array;
    /**
     * @generated from protobuf field: optional bool collaborative = 4;
     */
    collaborative?: boolean;
    /**
     * @generated from protobuf field: optional string pl3_version = 5;
     */
    pl3Version?: string;
    /**
     * @generated from protobuf field: optional bool deleted_by_owner = 6;
     */
    deletedByOwner?: boolean;
    /**
     * @generated from protobuf field: optional string client_id = 10;
     */
    clientId?: string;
    /**
     * @generated from protobuf field: optional string format = 11;
     */
    format?: string;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.FormatListAttribute format_attributes = 12;
     */
    formatAttributes: FormatListAttribute[];
}
/**
 * @generated from protobuf message spotify.playlist4.proto.ItemAttributes
 */
export interface ItemAttributes {
    /**
     * @generated from protobuf field: optional string added_by = 1;
     */
    addedBy?: string;
    /**
     * @generated from protobuf field: optional int64 timestamp = 2;
     */
    timestamp?: bigint;
    /**
     * @generated from protobuf field: optional int64 seen_at = 9;
     */
    seenAt?: bigint;
    /**
     * @generated from protobuf field: optional bool public = 10;
     */
    public?: boolean;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.FormatListAttribute format_attributes = 11;
     */
    formatAttributes: FormatListAttribute[];
    /**
     * @generated from protobuf field: optional bytes item_id = 12;
     */
    itemId?: Uint8Array;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.Add
 */
export interface Add {
    /**
     * @generated from protobuf field: optional int32 from_index = 1;
     */
    fromIndex?: number;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.Item items = 2;
     */
    items: Item[];
    /**
     * @generated from protobuf field: optional bool add_last = 4;
     */
    addLast?: boolean;
    /**
     * @generated from protobuf field: optional bool add_first = 5;
     */
    addFirst?: boolean;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.Rem
 */
export interface Rem {
    /**
     * @generated from protobuf field: optional int32 from_index = 1;
     */
    fromIndex?: number;
    /**
     * @generated from protobuf field: optional int32 length = 2;
     */
    length?: number;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.Item items = 3;
     */
    items: Item[];
    /**
     * @generated from protobuf field: optional bool items_as_key = 7;
     */
    itemsAsKey?: boolean;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.Mov
 */
export interface Mov {
    /**
     * @generated from protobuf field: int32 from_index = 1;
     */
    fromIndex: number;
    /**
     * @generated from protobuf field: int32 length = 2;
     */
    length: number;
    /**
     * @generated from protobuf field: int32 to_index = 3;
     */
    toIndex: number;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.ItemAttributesPartialState
 */
export interface ItemAttributesPartialState {
    /**
     * @generated from protobuf field: spotify.playlist4.proto.ItemAttributes values = 1;
     */
    values?: ItemAttributes;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.ItemAttributeKind no_value = 2;
     */
    noValue: ItemAttributeKind[];
}
/**
 * @generated from protobuf message spotify.playlist4.proto.ListAttributesPartialState
 */
export interface ListAttributesPartialState {
    /**
     * @generated from protobuf field: spotify.playlist4.proto.ListAttributes values = 1;
     */
    values?: ListAttributes;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.ListAttributeKind no_value = 2;
     */
    noValue: ListAttributeKind[];
}
/**
 * @generated from protobuf message spotify.playlist4.proto.UpdateItemAttributes
 */
export interface UpdateItemAttributes {
    /**
     * @generated from protobuf field: int32 index = 1;
     */
    index: number;
    /**
     * @generated from protobuf field: spotify.playlist4.proto.ItemAttributesPartialState new_attributes = 2;
     */
    newAttributes?: ItemAttributesPartialState;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.ItemAttributesPartialState old_attributes = 3;
     */
    oldAttributes?: ItemAttributesPartialState;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.UpdateListAttributes
 */
export interface UpdateListAttributes {
    /**
     * @generated from protobuf field: spotify.playlist4.proto.ListAttributesPartialState new_attributes = 1;
     */
    newAttributes?: ListAttributesPartialState;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.ListAttributesPartialState old_attributes = 2;
     */
    oldAttributes?: ListAttributesPartialState;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.Op
 */
export interface Op {
    /**
     * @generated from protobuf field: spotify.playlist4.proto.Op.Kind kind = 1;
     */
    kind: Op_Kind;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.Add add = 2;
     */
    add?: Add;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.Rem rem = 3;
     */
    rem?: Rem;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.Mov mov = 4;
     */
    mov?: Mov;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.UpdateItemAttributes update_item_attributes = 5;
     */
    updateItemAttributes?: UpdateItemAttributes;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.UpdateListAttributes update_list_attributes = 6;
     */
    updateListAttributes?: UpdateListAttributes;
}
/**
 * @generated from protobuf enum spotify.playlist4.proto.Op.Kind
 */
export enum Op_Kind {
    /**
     * @generated from protobuf enum value: KIND_UNKNOWN = 0;
     */
    KIND_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: ADD = 2;
     */
    ADD = 2,
    /**
     * @generated from protobuf enum value: REM = 3;
     */
    REM = 3,
    /**
     * @generated from protobuf enum value: MOV = 4;
     */
    MOV = 4,
    /**
     * @generated from protobuf enum value: UPDATE_ITEM_ATTRIBUTES = 5;
     */
    UPDATE_ITEM_ATTRIBUTES = 5,
    /**
     * @generated from protobuf enum value: UPDATE_LIST_ATTRIBUTES = 6;
     */
    UPDATE_LIST_ATTRIBUTES = 6
}
/**
 * @generated from protobuf message spotify.playlist4.proto.OpList
 */
export interface OpList {
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.Op ops = 1;
     */
    ops: Op[];
}
/**
 * @generated from protobuf message spotify.playlist4.proto.ChangeInfo
 */
export interface ChangeInfo {
    /**
     * @generated from protobuf field: optional string user = 1;
     */
    user?: string;
    /**
     * @generated from protobuf field: optional int64 timestamp = 2;
     */
    timestamp?: bigint;
    /**
     * @generated from protobuf field: optional bool admin = 3;
     */
    admin?: boolean;
    /**
     * @generated from protobuf field: optional bool undo = 4;
     */
    undo?: boolean;
    /**
     * @generated from protobuf field: optional bool redo = 5;
     */
    redo?: boolean;
    /**
     * @generated from protobuf field: optional bool merge = 6;
     */
    merge?: boolean;
    /**
     * @generated from protobuf field: optional bool compressed = 7;
     */
    compressed?: boolean;
    /**
     * @generated from protobuf field: optional bool migration = 8;
     */
    migration?: boolean;
    /**
     * @generated from protobuf field: optional int32 split_id = 9;
     */
    splitId?: number;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.SourceInfo source = 10;
     */
    source?: SourceInfo;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.SourceInfo
 */
export interface SourceInfo {
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.SourceInfo.Client client = 1;
     */
    client?: SourceInfo_Client;
    /**
     * @generated from protobuf field: optional string app = 3;
     */
    app?: string;
    /**
     * @generated from protobuf field: optional string source = 4;
     */
    source?: string;
    /**
     * @generated from protobuf field: optional string version = 5;
     */
    version?: string;
}
/**
 * @generated from protobuf enum spotify.playlist4.proto.SourceInfo.Client
 */
export enum SourceInfo_Client {
    /**
     * @generated from protobuf enum value: CLIENT_UNKNOWN = 0;
     */
    CLIENT_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: NATIVE_HERMES = 1;
     */
    NATIVE_HERMES = 1,
    /**
     * @generated from protobuf enum value: CLIENT = 2;
     */
    CLIENT = 2,
    /**
     * @generated from protobuf enum value: PYTHON = 3;
     */
    PYTHON = 3,
    /**
     * @generated from protobuf enum value: JAVA = 4;
     */
    JAVA = 4,
    /**
     * @generated from protobuf enum value: WEBPLAYER = 5;
     */
    WEBPLAYER = 5,
    /**
     * @generated from protobuf enum value: LIBSPOTIFY = 6;
     */
    LIBSPOTIFY = 6
}
/**
 * @generated from protobuf message spotify.playlist4.proto.Delta
 */
export interface Delta {
    /**
     * @generated from protobuf field: optional bytes base_version = 1;
     */
    baseVersion?: Uint8Array;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.Op ops = 2;
     */
    ops: Op[];
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.ChangeInfo info = 4;
     */
    info?: ChangeInfo;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.Diff
 */
export interface Diff {
    /**
     * @generated from protobuf field: bytes from_revision = 1;
     */
    fromRevision: Uint8Array;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.Op ops = 2;
     */
    ops: Op[];
    /**
     * @generated from protobuf field: bytes to_revision = 3;
     */
    toRevision: Uint8Array;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.ListChanges
 */
export interface ListChanges {
    /**
     * @generated from protobuf field: optional bytes base_revision = 1;
     */
    baseRevision?: Uint8Array;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.Delta deltas = 2;
     */
    deltas: Delta[];
    /**
     * @generated from protobuf field: optional bool want_resulting_revisions = 3;
     */
    wantResultingRevisions?: boolean;
    /**
     * @generated from protobuf field: optional bool want_sync_result = 4;
     */
    wantSyncResult?: boolean;
    /**
     * @generated from protobuf field: repeated int64 nonces = 6;
     */
    nonces: bigint[];
}
/**
 * @generated from protobuf message spotify.playlist4.proto.SelectedListContent
 */
export interface SelectedListContent {
    /**
     * @generated from protobuf field: optional bytes revision = 1;
     */
    revision?: Uint8Array;
    /**
     * @generated from protobuf field: optional int32 length = 2;
     */
    length?: number;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.ListAttributes attributes = 3;
     */
    attributes?: ListAttributes;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.ListItems contents = 5;
     */
    contents?: ListItems;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.Diff diff = 6;
     */
    diff?: Diff;
    /**
     * @generated from protobuf field: optional spotify.playlist4.proto.Diff sync_result = 7;
     */
    syncResult?: Diff;
    /**
     * @generated from protobuf field: repeated bytes resulting_revisions = 8;
     */
    resultingRevisions: Uint8Array[];
    /**
     * @generated from protobuf field: optional bool multiple_heads = 9;
     */
    multipleHeads?: boolean;
    /**
     * @generated from protobuf field: optional bool up_to_date = 10;
     */
    upToDate?: boolean;
    /**
     * @generated from protobuf field: repeated int64 nonces = 14;
     */
    nonces: bigint[];
    /**
     * @generated from protobuf field: optional int64 timestamp = 15;
     */
    timestamp?: bigint;
    /**
     * @generated from protobuf field: optional string owner_username = 16;
     */
    ownerUsername?: string;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.CreateListReply
 */
export interface CreateListReply {
    /**
     * @generated from protobuf field: bytes uri = 1;
     */
    uri: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes revision = 2;
     */
    revision?: Uint8Array;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.ModifyReply
 */
export interface ModifyReply {
    /**
     * @generated from protobuf field: bytes uri = 1;
     */
    uri: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes revision = 2;
     */
    revision?: Uint8Array;
}
/**
 * @generated from protobuf message spotify.playlist4.proto.SubscribeRequest
 */
export interface SubscribeRequest {
    /**
     * @generated from protobuf field: repeated bytes uris = 1;
     */
    uris: Uint8Array[];
}
/**
 * @generated from protobuf message spotify.playlist4.proto.UnsubscribeRequest
 */
export interface UnsubscribeRequest {
    /**
     * @generated from protobuf field: repeated bytes uris = 1;
     */
    uris: Uint8Array[];
}
/**
 * @generated from protobuf message spotify.playlist4.proto.PlaylistModificationInfo
 */
export interface PlaylistModificationInfo {
    /**
     * @generated from protobuf field: optional bytes uri = 1;
     */
    uri?: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes new_revision = 2;
     */
    newRevision?: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes parent_revision = 3;
     */
    parentRevision?: Uint8Array;
    /**
     * @generated from protobuf field: repeated spotify.playlist4.proto.Op ops = 4;
     */
    ops: Op[];
}
/**
 * @generated from protobuf enum spotify.playlist4.proto.ListAttributeKind
 */
export enum ListAttributeKind {
    /**
     * @generated from protobuf enum value: LIST_UNKNOWN = 0;
     */
    LIST_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: LIST_NAME = 1;
     */
    LIST_NAME = 1,
    /**
     * @generated from protobuf enum value: LIST_DESCRIPTION = 2;
     */
    LIST_DESCRIPTION = 2,
    /**
     * @generated from protobuf enum value: LIST_PICTURE = 3;
     */
    LIST_PICTURE = 3,
    /**
     * @generated from protobuf enum value: LIST_COLLABORATIVE = 4;
     */
    LIST_COLLABORATIVE = 4,
    /**
     * @generated from protobuf enum value: LIST_PL3_VERSION = 5;
     */
    LIST_PL3_VERSION = 5,
    /**
     * @generated from protobuf enum value: LIST_DELETED_BY_OWNER = 6;
     */
    LIST_DELETED_BY_OWNER = 6,
    /**
     * @generated from protobuf enum value: LIST_CLIENT_ID = 10;
     */
    LIST_CLIENT_ID = 10,
    /**
     * @generated from protobuf enum value: LIST_FORMAT = 11;
     */
    LIST_FORMAT = 11,
    /**
     * @generated from protobuf enum value: LIST_FORMAT_ATTRIBUTES = 12;
     */
    LIST_FORMAT_ATTRIBUTES = 12
}
/**
 * @generated from protobuf enum spotify.playlist4.proto.ItemAttributeKind
 */
export enum ItemAttributeKind {
    /**
     * @generated from protobuf enum value: ITEM_UNKNOWN = 0;
     */
    ITEM_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: ITEM_ADDED_BY = 1;
     */
    ITEM_ADDED_BY = 1,
    /**
     * @generated from protobuf enum value: ITEM_TIMESTAMP = 2;
     */
    ITEM_TIMESTAMP = 2,
    /**
     * @generated from protobuf enum value: ITEM_SEEN_AT = 9;
     */
    ITEM_SEEN_AT = 9,
    /**
     * @generated from protobuf enum value: ITEM_PUBLIC = 10;
     */
    ITEM_PUBLIC = 10,
    /**
     * @generated from protobuf enum value: ITEM_FORMAT_ATTRIBUTES = 11;
     */
    ITEM_FORMAT_ATTRIBUTES = 11,
    /**
     * @generated from protobuf enum value: ITEM_ID = 12;
     */
    ITEM_ID = 12
}
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("spotify.playlist4.proto.Item", [
            { no: 1, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "attributes", kind: "message", T: () => ItemAttributes }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = { uri: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uri */ 1:
                    message.uri = reader.string();
                    break;
                case /* optional spotify.playlist4.proto.ItemAttributes attributes */ 2:
                    message.attributes = ItemAttributes.internalBinaryRead(reader, reader.uint32(), options, message.attributes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uri = 1; */
        if (message.uri !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uri);
        /* optional spotify.playlist4.proto.ItemAttributes attributes = 2; */
        if (message.attributes)
            ItemAttributes.internalBinaryWrite(message.attributes, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.Item
 */
export const Item = new Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MetaItem$Type extends MessageType<MetaItem> {
    constructor() {
        super("spotify.playlist4.proto.MetaItem", [
            { no: 1, name: "revision", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "attributes", kind: "message", T: () => ListAttributes },
            { no: 3, name: "length", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "timestamp", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "owner_username", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MetaItem>): MetaItem {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MetaItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetaItem): MetaItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes revision */ 1:
                    message.revision = reader.bytes();
                    break;
                case /* optional spotify.playlist4.proto.ListAttributes attributes */ 2:
                    message.attributes = ListAttributes.internalBinaryRead(reader, reader.uint32(), options, message.attributes);
                    break;
                case /* optional int32 length */ 3:
                    message.length = reader.int32();
                    break;
                case /* optional int64 timestamp */ 4:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* optional string owner_username */ 5:
                    message.ownerUsername = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetaItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes revision = 1; */
        if (message.revision !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.revision);
        /* optional spotify.playlist4.proto.ListAttributes attributes = 2; */
        if (message.attributes)
            ListAttributes.internalBinaryWrite(message.attributes, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 length = 3; */
        if (message.length !== undefined)
            writer.tag(3, WireType.Varint).int32(message.length);
        /* optional int64 timestamp = 4; */
        if (message.timestamp !== undefined)
            writer.tag(4, WireType.Varint).int64(message.timestamp);
        /* optional string owner_username = 5; */
        if (message.ownerUsername !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.ownerUsername);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.MetaItem
 */
export const MetaItem = new MetaItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListItems$Type extends MessageType<ListItems> {
    constructor() {
        super("spotify.playlist4.proto.ListItems", [
            { no: 1, name: "pos", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "truncated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Item },
            { no: 4, name: "meta_items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MetaItem }
        ]);
    }
    create(value?: PartialMessage<ListItems>): ListItems {
        const message = { pos: 0, truncated: false, items: [], metaItems: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListItems>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListItems): ListItems {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 pos */ 1:
                    message.pos = reader.int32();
                    break;
                case /* bool truncated */ 2:
                    message.truncated = reader.bool();
                    break;
                case /* repeated spotify.playlist4.proto.Item items */ 3:
                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated spotify.playlist4.proto.MetaItem meta_items */ 4:
                    message.metaItems.push(MetaItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListItems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 pos = 1; */
        if (message.pos !== 0)
            writer.tag(1, WireType.Varint).int32(message.pos);
        /* bool truncated = 2; */
        if (message.truncated !== false)
            writer.tag(2, WireType.Varint).bool(message.truncated);
        /* repeated spotify.playlist4.proto.Item items = 3; */
        for (let i = 0; i < message.items.length; i++)
            Item.internalBinaryWrite(message.items[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated spotify.playlist4.proto.MetaItem meta_items = 4; */
        for (let i = 0; i < message.metaItems.length; i++)
            MetaItem.internalBinaryWrite(message.metaItems[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.ListItems
 */
export const ListItems = new ListItems$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FormatListAttribute$Type extends MessageType<FormatListAttribute> {
    constructor() {
        super("spotify.playlist4.proto.FormatListAttribute", [
            { no: 1, name: "key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FormatListAttribute>): FormatListAttribute {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FormatListAttribute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FormatListAttribute): FormatListAttribute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string key */ 1:
                    message.key = reader.string();
                    break;
                case /* optional string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FormatListAttribute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string key = 1; */
        if (message.key !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* optional string value = 2; */
        if (message.value !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.FormatListAttribute
 */
export const FormatListAttribute = new FormatListAttribute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAttributes$Type extends MessageType<ListAttributes> {
    constructor() {
        super("spotify.playlist4.proto.ListAttributes", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "picture", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "collaborative", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "pl3_version", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "deleted_by_owner", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "client_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "format", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "format_attributes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FormatListAttribute }
        ]);
    }
    create(value?: PartialMessage<ListAttributes>): ListAttributes {
        const message = { formatAttributes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListAttributes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAttributes): ListAttributes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional string description */ 2:
                    message.description = reader.string();
                    break;
                case /* optional bytes picture */ 3:
                    message.picture = reader.bytes();
                    break;
                case /* optional bool collaborative */ 4:
                    message.collaborative = reader.bool();
                    break;
                case /* optional string pl3_version */ 5:
                    message.pl3Version = reader.string();
                    break;
                case /* optional bool deleted_by_owner */ 6:
                    message.deletedByOwner = reader.bool();
                    break;
                case /* optional string client_id */ 10:
                    message.clientId = reader.string();
                    break;
                case /* optional string format */ 11:
                    message.format = reader.string();
                    break;
                case /* repeated spotify.playlist4.proto.FormatListAttribute format_attributes */ 12:
                    message.formatAttributes.push(FormatListAttribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAttributes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string description = 2; */
        if (message.description !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* optional bytes picture = 3; */
        if (message.picture !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.picture);
        /* optional bool collaborative = 4; */
        if (message.collaborative !== undefined)
            writer.tag(4, WireType.Varint).bool(message.collaborative);
        /* optional string pl3_version = 5; */
        if (message.pl3Version !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.pl3Version);
        /* optional bool deleted_by_owner = 6; */
        if (message.deletedByOwner !== undefined)
            writer.tag(6, WireType.Varint).bool(message.deletedByOwner);
        /* optional string client_id = 10; */
        if (message.clientId !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.clientId);
        /* optional string format = 11; */
        if (message.format !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.format);
        /* repeated spotify.playlist4.proto.FormatListAttribute format_attributes = 12; */
        for (let i = 0; i < message.formatAttributes.length; i++)
            FormatListAttribute.internalBinaryWrite(message.formatAttributes[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.ListAttributes
 */
export const ListAttributes = new ListAttributes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemAttributes$Type extends MessageType<ItemAttributes> {
    constructor() {
        super("spotify.playlist4.proto.ItemAttributes", [
            { no: 1, name: "added_by", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "seen_at", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "public", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "format_attributes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FormatListAttribute },
            { no: 12, name: "item_id", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ItemAttributes>): ItemAttributes {
        const message = { formatAttributes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemAttributes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemAttributes): ItemAttributes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string added_by */ 1:
                    message.addedBy = reader.string();
                    break;
                case /* optional int64 timestamp */ 2:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* optional int64 seen_at */ 9:
                    message.seenAt = reader.int64().toBigInt();
                    break;
                case /* optional bool public */ 10:
                    message.public = reader.bool();
                    break;
                case /* repeated spotify.playlist4.proto.FormatListAttribute format_attributes */ 11:
                    message.formatAttributes.push(FormatListAttribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bytes item_id */ 12:
                    message.itemId = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemAttributes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string added_by = 1; */
        if (message.addedBy !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.addedBy);
        /* optional int64 timestamp = 2; */
        if (message.timestamp !== undefined)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        /* optional int64 seen_at = 9; */
        if (message.seenAt !== undefined)
            writer.tag(9, WireType.Varint).int64(message.seenAt);
        /* optional bool public = 10; */
        if (message.public !== undefined)
            writer.tag(10, WireType.Varint).bool(message.public);
        /* repeated spotify.playlist4.proto.FormatListAttribute format_attributes = 11; */
        for (let i = 0; i < message.formatAttributes.length; i++)
            FormatListAttribute.internalBinaryWrite(message.formatAttributes[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional bytes item_id = 12; */
        if (message.itemId !== undefined)
            writer.tag(12, WireType.LengthDelimited).bytes(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.ItemAttributes
 */
export const ItemAttributes = new ItemAttributes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Add$Type extends MessageType<Add> {
    constructor() {
        super("spotify.playlist4.proto.Add", [
            { no: 1, name: "from_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Item },
            { no: 4, name: "add_last", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "add_first", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Add>): Add {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Add>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Add): Add {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 from_index */ 1:
                    message.fromIndex = reader.int32();
                    break;
                case /* repeated spotify.playlist4.proto.Item items */ 2:
                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool add_last */ 4:
                    message.addLast = reader.bool();
                    break;
                case /* optional bool add_first */ 5:
                    message.addFirst = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Add, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 from_index = 1; */
        if (message.fromIndex !== undefined)
            writer.tag(1, WireType.Varint).int32(message.fromIndex);
        /* repeated spotify.playlist4.proto.Item items = 2; */
        for (let i = 0; i < message.items.length; i++)
            Item.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool add_last = 4; */
        if (message.addLast !== undefined)
            writer.tag(4, WireType.Varint).bool(message.addLast);
        /* optional bool add_first = 5; */
        if (message.addFirst !== undefined)
            writer.tag(5, WireType.Varint).bool(message.addFirst);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.Add
 */
export const Add = new Add$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Rem$Type extends MessageType<Rem> {
    constructor() {
        super("spotify.playlist4.proto.Rem", [
            { no: 1, name: "from_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "length", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Item },
            { no: 7, name: "items_as_key", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Rem>): Rem {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Rem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rem): Rem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 from_index */ 1:
                    message.fromIndex = reader.int32();
                    break;
                case /* optional int32 length */ 2:
                    message.length = reader.int32();
                    break;
                case /* repeated spotify.playlist4.proto.Item items */ 3:
                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool items_as_key */ 7:
                    message.itemsAsKey = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Rem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 from_index = 1; */
        if (message.fromIndex !== undefined)
            writer.tag(1, WireType.Varint).int32(message.fromIndex);
        /* optional int32 length = 2; */
        if (message.length !== undefined)
            writer.tag(2, WireType.Varint).int32(message.length);
        /* repeated spotify.playlist4.proto.Item items = 3; */
        for (let i = 0; i < message.items.length; i++)
            Item.internalBinaryWrite(message.items[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional bool items_as_key = 7; */
        if (message.itemsAsKey !== undefined)
            writer.tag(7, WireType.Varint).bool(message.itemsAsKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.Rem
 */
export const Rem = new Rem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Mov$Type extends MessageType<Mov> {
    constructor() {
        super("spotify.playlist4.proto.Mov", [
            { no: 1, name: "from_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "to_index", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Mov>): Mov {
        const message = { fromIndex: 0, length: 0, toIndex: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Mov>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mov): Mov {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 from_index */ 1:
                    message.fromIndex = reader.int32();
                    break;
                case /* int32 length */ 2:
                    message.length = reader.int32();
                    break;
                case /* int32 to_index */ 3:
                    message.toIndex = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Mov, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 from_index = 1; */
        if (message.fromIndex !== 0)
            writer.tag(1, WireType.Varint).int32(message.fromIndex);
        /* int32 length = 2; */
        if (message.length !== 0)
            writer.tag(2, WireType.Varint).int32(message.length);
        /* int32 to_index = 3; */
        if (message.toIndex !== 0)
            writer.tag(3, WireType.Varint).int32(message.toIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.Mov
 */
export const Mov = new Mov$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemAttributesPartialState$Type extends MessageType<ItemAttributesPartialState> {
    constructor() {
        super("spotify.playlist4.proto.ItemAttributesPartialState", [
            { no: 1, name: "values", kind: "message", T: () => ItemAttributes },
            { no: 2, name: "no_value", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["spotify.playlist4.proto.ItemAttributeKind", ItemAttributeKind] }
        ]);
    }
    create(value?: PartialMessage<ItemAttributesPartialState>): ItemAttributesPartialState {
        const message = { noValue: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemAttributesPartialState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemAttributesPartialState): ItemAttributesPartialState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.playlist4.proto.ItemAttributes values */ 1:
                    message.values = ItemAttributes.internalBinaryRead(reader, reader.uint32(), options, message.values);
                    break;
                case /* repeated spotify.playlist4.proto.ItemAttributeKind no_value */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.noValue.push(reader.int32());
                    else
                        message.noValue.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemAttributesPartialState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.playlist4.proto.ItemAttributes values = 1; */
        if (message.values)
            ItemAttributes.internalBinaryWrite(message.values, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated spotify.playlist4.proto.ItemAttributeKind no_value = 2; */
        for (let i = 0; i < message.noValue.length; i++)
            writer.tag(2, WireType.Varint).int32(message.noValue[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.ItemAttributesPartialState
 */
export const ItemAttributesPartialState = new ItemAttributesPartialState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAttributesPartialState$Type extends MessageType<ListAttributesPartialState> {
    constructor() {
        super("spotify.playlist4.proto.ListAttributesPartialState", [
            { no: 1, name: "values", kind: "message", T: () => ListAttributes },
            { no: 2, name: "no_value", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["spotify.playlist4.proto.ListAttributeKind", ListAttributeKind] }
        ]);
    }
    create(value?: PartialMessage<ListAttributesPartialState>): ListAttributesPartialState {
        const message = { noValue: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListAttributesPartialState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAttributesPartialState): ListAttributesPartialState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.playlist4.proto.ListAttributes values */ 1:
                    message.values = ListAttributes.internalBinaryRead(reader, reader.uint32(), options, message.values);
                    break;
                case /* repeated spotify.playlist4.proto.ListAttributeKind no_value */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.noValue.push(reader.int32());
                    else
                        message.noValue.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAttributesPartialState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.playlist4.proto.ListAttributes values = 1; */
        if (message.values)
            ListAttributes.internalBinaryWrite(message.values, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated spotify.playlist4.proto.ListAttributeKind no_value = 2; */
        for (let i = 0; i < message.noValue.length; i++)
            writer.tag(2, WireType.Varint).int32(message.noValue[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.ListAttributesPartialState
 */
export const ListAttributesPartialState = new ListAttributesPartialState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateItemAttributes$Type extends MessageType<UpdateItemAttributes> {
    constructor() {
        super("spotify.playlist4.proto.UpdateItemAttributes", [
            { no: 1, name: "index", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "new_attributes", kind: "message", T: () => ItemAttributesPartialState },
            { no: 3, name: "old_attributes", kind: "message", T: () => ItemAttributesPartialState }
        ]);
    }
    create(value?: PartialMessage<UpdateItemAttributes>): UpdateItemAttributes {
        const message = { index: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateItemAttributes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateItemAttributes): UpdateItemAttributes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 index */ 1:
                    message.index = reader.int32();
                    break;
                case /* spotify.playlist4.proto.ItemAttributesPartialState new_attributes */ 2:
                    message.newAttributes = ItemAttributesPartialState.internalBinaryRead(reader, reader.uint32(), options, message.newAttributes);
                    break;
                case /* optional spotify.playlist4.proto.ItemAttributesPartialState old_attributes */ 3:
                    message.oldAttributes = ItemAttributesPartialState.internalBinaryRead(reader, reader.uint32(), options, message.oldAttributes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateItemAttributes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 index = 1; */
        if (message.index !== 0)
            writer.tag(1, WireType.Varint).int32(message.index);
        /* spotify.playlist4.proto.ItemAttributesPartialState new_attributes = 2; */
        if (message.newAttributes)
            ItemAttributesPartialState.internalBinaryWrite(message.newAttributes, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.playlist4.proto.ItemAttributesPartialState old_attributes = 3; */
        if (message.oldAttributes)
            ItemAttributesPartialState.internalBinaryWrite(message.oldAttributes, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.UpdateItemAttributes
 */
export const UpdateItemAttributes = new UpdateItemAttributes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateListAttributes$Type extends MessageType<UpdateListAttributes> {
    constructor() {
        super("spotify.playlist4.proto.UpdateListAttributes", [
            { no: 1, name: "new_attributes", kind: "message", T: () => ListAttributesPartialState },
            { no: 2, name: "old_attributes", kind: "message", T: () => ListAttributesPartialState }
        ]);
    }
    create(value?: PartialMessage<UpdateListAttributes>): UpdateListAttributes {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateListAttributes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateListAttributes): UpdateListAttributes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.playlist4.proto.ListAttributesPartialState new_attributes */ 1:
                    message.newAttributes = ListAttributesPartialState.internalBinaryRead(reader, reader.uint32(), options, message.newAttributes);
                    break;
                case /* optional spotify.playlist4.proto.ListAttributesPartialState old_attributes */ 2:
                    message.oldAttributes = ListAttributesPartialState.internalBinaryRead(reader, reader.uint32(), options, message.oldAttributes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateListAttributes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.playlist4.proto.ListAttributesPartialState new_attributes = 1; */
        if (message.newAttributes)
            ListAttributesPartialState.internalBinaryWrite(message.newAttributes, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.playlist4.proto.ListAttributesPartialState old_attributes = 2; */
        if (message.oldAttributes)
            ListAttributesPartialState.internalBinaryWrite(message.oldAttributes, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.UpdateListAttributes
 */
export const UpdateListAttributes = new UpdateListAttributes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Op$Type extends MessageType<Op> {
    constructor() {
        super("spotify.playlist4.proto.Op", [
            { no: 1, name: "kind", kind: "enum", T: () => ["spotify.playlist4.proto.Op.Kind", Op_Kind] },
            { no: 2, name: "add", kind: "message", T: () => Add },
            { no: 3, name: "rem", kind: "message", T: () => Rem },
            { no: 4, name: "mov", kind: "message", T: () => Mov },
            { no: 5, name: "update_item_attributes", kind: "message", T: () => UpdateItemAttributes },
            { no: 6, name: "update_list_attributes", kind: "message", T: () => UpdateListAttributes }
        ]);
    }
    create(value?: PartialMessage<Op>): Op {
        const message = { kind: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Op>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Op): Op {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.playlist4.proto.Op.Kind kind */ 1:
                    message.kind = reader.int32();
                    break;
                case /* optional spotify.playlist4.proto.Add add */ 2:
                    message.add = Add.internalBinaryRead(reader, reader.uint32(), options, message.add);
                    break;
                case /* optional spotify.playlist4.proto.Rem rem */ 3:
                    message.rem = Rem.internalBinaryRead(reader, reader.uint32(), options, message.rem);
                    break;
                case /* optional spotify.playlist4.proto.Mov mov */ 4:
                    message.mov = Mov.internalBinaryRead(reader, reader.uint32(), options, message.mov);
                    break;
                case /* optional spotify.playlist4.proto.UpdateItemAttributes update_item_attributes */ 5:
                    message.updateItemAttributes = UpdateItemAttributes.internalBinaryRead(reader, reader.uint32(), options, message.updateItemAttributes);
                    break;
                case /* optional spotify.playlist4.proto.UpdateListAttributes update_list_attributes */ 6:
                    message.updateListAttributes = UpdateListAttributes.internalBinaryRead(reader, reader.uint32(), options, message.updateListAttributes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Op, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.playlist4.proto.Op.Kind kind = 1; */
        if (message.kind !== 0)
            writer.tag(1, WireType.Varint).int32(message.kind);
        /* optional spotify.playlist4.proto.Add add = 2; */
        if (message.add)
            Add.internalBinaryWrite(message.add, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.playlist4.proto.Rem rem = 3; */
        if (message.rem)
            Rem.internalBinaryWrite(message.rem, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.playlist4.proto.Mov mov = 4; */
        if (message.mov)
            Mov.internalBinaryWrite(message.mov, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.playlist4.proto.UpdateItemAttributes update_item_attributes = 5; */
        if (message.updateItemAttributes)
            UpdateItemAttributes.internalBinaryWrite(message.updateItemAttributes, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.playlist4.proto.UpdateListAttributes update_list_attributes = 6; */
        if (message.updateListAttributes)
            UpdateListAttributes.internalBinaryWrite(message.updateListAttributes, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.Op
 */
export const Op = new Op$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpList$Type extends MessageType<OpList> {
    constructor() {
        super("spotify.playlist4.proto.OpList", [
            { no: 1, name: "ops", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Op }
        ]);
    }
    create(value?: PartialMessage<OpList>): OpList {
        const message = { ops: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpList): OpList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated spotify.playlist4.proto.Op ops */ 1:
                    message.ops.push(Op.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OpList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated spotify.playlist4.proto.Op ops = 1; */
        for (let i = 0; i < message.ops.length; i++)
            Op.internalBinaryWrite(message.ops[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.OpList
 */
export const OpList = new OpList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeInfo$Type extends MessageType<ChangeInfo> {
    constructor() {
        super("spotify.playlist4.proto.ChangeInfo", [
            { no: 1, name: "user", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "admin", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "undo", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "redo", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "merge", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "compressed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "migration", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "split_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "source", kind: "message", T: () => SourceInfo }
        ]);
    }
    create(value?: PartialMessage<ChangeInfo>): ChangeInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeInfo): ChangeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string user */ 1:
                    message.user = reader.string();
                    break;
                case /* optional int64 timestamp */ 2:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* optional bool admin */ 3:
                    message.admin = reader.bool();
                    break;
                case /* optional bool undo */ 4:
                    message.undo = reader.bool();
                    break;
                case /* optional bool redo */ 5:
                    message.redo = reader.bool();
                    break;
                case /* optional bool merge */ 6:
                    message.merge = reader.bool();
                    break;
                case /* optional bool compressed */ 7:
                    message.compressed = reader.bool();
                    break;
                case /* optional bool migration */ 8:
                    message.migration = reader.bool();
                    break;
                case /* optional int32 split_id */ 9:
                    message.splitId = reader.int32();
                    break;
                case /* optional spotify.playlist4.proto.SourceInfo source */ 10:
                    message.source = SourceInfo.internalBinaryRead(reader, reader.uint32(), options, message.source);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string user = 1; */
        if (message.user !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.user);
        /* optional int64 timestamp = 2; */
        if (message.timestamp !== undefined)
            writer.tag(2, WireType.Varint).int64(message.timestamp);
        /* optional bool admin = 3; */
        if (message.admin !== undefined)
            writer.tag(3, WireType.Varint).bool(message.admin);
        /* optional bool undo = 4; */
        if (message.undo !== undefined)
            writer.tag(4, WireType.Varint).bool(message.undo);
        /* optional bool redo = 5; */
        if (message.redo !== undefined)
            writer.tag(5, WireType.Varint).bool(message.redo);
        /* optional bool merge = 6; */
        if (message.merge !== undefined)
            writer.tag(6, WireType.Varint).bool(message.merge);
        /* optional bool compressed = 7; */
        if (message.compressed !== undefined)
            writer.tag(7, WireType.Varint).bool(message.compressed);
        /* optional bool migration = 8; */
        if (message.migration !== undefined)
            writer.tag(8, WireType.Varint).bool(message.migration);
        /* optional int32 split_id = 9; */
        if (message.splitId !== undefined)
            writer.tag(9, WireType.Varint).int32(message.splitId);
        /* optional spotify.playlist4.proto.SourceInfo source = 10; */
        if (message.source)
            SourceInfo.internalBinaryWrite(message.source, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.ChangeInfo
 */
export const ChangeInfo = new ChangeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SourceInfo$Type extends MessageType<SourceInfo> {
    constructor() {
        super("spotify.playlist4.proto.SourceInfo", [
            { no: 1, name: "client", kind: "enum", opt: true, T: () => ["spotify.playlist4.proto.SourceInfo.Client", SourceInfo_Client] },
            { no: 3, name: "app", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "source", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "version", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SourceInfo>): SourceInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SourceInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourceInfo): SourceInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.playlist4.proto.SourceInfo.Client client */ 1:
                    message.client = reader.int32();
                    break;
                case /* optional string app */ 3:
                    message.app = reader.string();
                    break;
                case /* optional string source */ 4:
                    message.source = reader.string();
                    break;
                case /* optional string version */ 5:
                    message.version = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SourceInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.playlist4.proto.SourceInfo.Client client = 1; */
        if (message.client !== undefined)
            writer.tag(1, WireType.Varint).int32(message.client);
        /* optional string app = 3; */
        if (message.app !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.app);
        /* optional string source = 4; */
        if (message.source !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.source);
        /* optional string version = 5; */
        if (message.version !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.SourceInfo
 */
export const SourceInfo = new SourceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Delta$Type extends MessageType<Delta> {
    constructor() {
        super("spotify.playlist4.proto.Delta", [
            { no: 1, name: "base_version", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "ops", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Op },
            { no: 4, name: "info", kind: "message", T: () => ChangeInfo }
        ]);
    }
    create(value?: PartialMessage<Delta>): Delta {
        const message = { ops: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Delta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Delta): Delta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes base_version */ 1:
                    message.baseVersion = reader.bytes();
                    break;
                case /* repeated spotify.playlist4.proto.Op ops */ 2:
                    message.ops.push(Op.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional spotify.playlist4.proto.ChangeInfo info */ 4:
                    message.info = ChangeInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Delta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes base_version = 1; */
        if (message.baseVersion !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.baseVersion);
        /* repeated spotify.playlist4.proto.Op ops = 2; */
        for (let i = 0; i < message.ops.length; i++)
            Op.internalBinaryWrite(message.ops[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.playlist4.proto.ChangeInfo info = 4; */
        if (message.info)
            ChangeInfo.internalBinaryWrite(message.info, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.Delta
 */
export const Delta = new Delta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Diff$Type extends MessageType<Diff> {
    constructor() {
        super("spotify.playlist4.proto.Diff", [
            { no: 1, name: "from_revision", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "ops", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Op },
            { no: 3, name: "to_revision", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Diff>): Diff {
        const message = { fromRevision: new Uint8Array(0), ops: [], toRevision: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Diff>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Diff): Diff {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes from_revision */ 1:
                    message.fromRevision = reader.bytes();
                    break;
                case /* repeated spotify.playlist4.proto.Op ops */ 2:
                    message.ops.push(Op.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bytes to_revision */ 3:
                    message.toRevision = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Diff, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes from_revision = 1; */
        if (message.fromRevision.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.fromRevision);
        /* repeated spotify.playlist4.proto.Op ops = 2; */
        for (let i = 0; i < message.ops.length; i++)
            Op.internalBinaryWrite(message.ops[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes to_revision = 3; */
        if (message.toRevision.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.toRevision);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.Diff
 */
export const Diff = new Diff$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListChanges$Type extends MessageType<ListChanges> {
    constructor() {
        super("spotify.playlist4.proto.ListChanges", [
            { no: 1, name: "base_revision", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "deltas", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Delta },
            { no: 3, name: "want_resulting_revisions", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "want_sync_result", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "nonces", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListChanges>): ListChanges {
        const message = { deltas: [], nonces: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListChanges>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListChanges): ListChanges {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes base_revision */ 1:
                    message.baseRevision = reader.bytes();
                    break;
                case /* repeated spotify.playlist4.proto.Delta deltas */ 2:
                    message.deltas.push(Delta.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool want_resulting_revisions */ 3:
                    message.wantResultingRevisions = reader.bool();
                    break;
                case /* optional bool want_sync_result */ 4:
                    message.wantSyncResult = reader.bool();
                    break;
                case /* repeated int64 nonces */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.nonces.push(reader.int64().toBigInt());
                    else
                        message.nonces.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListChanges, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes base_revision = 1; */
        if (message.baseRevision !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.baseRevision);
        /* repeated spotify.playlist4.proto.Delta deltas = 2; */
        for (let i = 0; i < message.deltas.length; i++)
            Delta.internalBinaryWrite(message.deltas[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool want_resulting_revisions = 3; */
        if (message.wantResultingRevisions !== undefined)
            writer.tag(3, WireType.Varint).bool(message.wantResultingRevisions);
        /* optional bool want_sync_result = 4; */
        if (message.wantSyncResult !== undefined)
            writer.tag(4, WireType.Varint).bool(message.wantSyncResult);
        /* repeated int64 nonces = 6; */
        for (let i = 0; i < message.nonces.length; i++)
            writer.tag(6, WireType.Varint).int64(message.nonces[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.ListChanges
 */
export const ListChanges = new ListChanges$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectedListContent$Type extends MessageType<SelectedListContent> {
    constructor() {
        super("spotify.playlist4.proto.SelectedListContent", [
            { no: 1, name: "revision", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "length", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "attributes", kind: "message", T: () => ListAttributes },
            { no: 5, name: "contents", kind: "message", T: () => ListItems },
            { no: 6, name: "diff", kind: "message", T: () => Diff },
            { no: 7, name: "sync_result", kind: "message", T: () => Diff },
            { no: 8, name: "resulting_revisions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 9, name: "multiple_heads", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "up_to_date", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "nonces", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "timestamp", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 16, name: "owner_username", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SelectedListContent>): SelectedListContent {
        const message = { resultingRevisions: [], nonces: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SelectedListContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectedListContent): SelectedListContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes revision */ 1:
                    message.revision = reader.bytes();
                    break;
                case /* optional int32 length */ 2:
                    message.length = reader.int32();
                    break;
                case /* optional spotify.playlist4.proto.ListAttributes attributes */ 3:
                    message.attributes = ListAttributes.internalBinaryRead(reader, reader.uint32(), options, message.attributes);
                    break;
                case /* optional spotify.playlist4.proto.ListItems contents */ 5:
                    message.contents = ListItems.internalBinaryRead(reader, reader.uint32(), options, message.contents);
                    break;
                case /* optional spotify.playlist4.proto.Diff diff */ 6:
                    message.diff = Diff.internalBinaryRead(reader, reader.uint32(), options, message.diff);
                    break;
                case /* optional spotify.playlist4.proto.Diff sync_result */ 7:
                    message.syncResult = Diff.internalBinaryRead(reader, reader.uint32(), options, message.syncResult);
                    break;
                case /* repeated bytes resulting_revisions */ 8:
                    message.resultingRevisions.push(reader.bytes());
                    break;
                case /* optional bool multiple_heads */ 9:
                    message.multipleHeads = reader.bool();
                    break;
                case /* optional bool up_to_date */ 10:
                    message.upToDate = reader.bool();
                    break;
                case /* repeated int64 nonces */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.nonces.push(reader.int64().toBigInt());
                    else
                        message.nonces.push(reader.int64().toBigInt());
                    break;
                case /* optional int64 timestamp */ 15:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* optional string owner_username */ 16:
                    message.ownerUsername = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectedListContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes revision = 1; */
        if (message.revision !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.revision);
        /* optional int32 length = 2; */
        if (message.length !== undefined)
            writer.tag(2, WireType.Varint).int32(message.length);
        /* optional spotify.playlist4.proto.ListAttributes attributes = 3; */
        if (message.attributes)
            ListAttributes.internalBinaryWrite(message.attributes, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.playlist4.proto.ListItems contents = 5; */
        if (message.contents)
            ListItems.internalBinaryWrite(message.contents, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.playlist4.proto.Diff diff = 6; */
        if (message.diff)
            Diff.internalBinaryWrite(message.diff, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.playlist4.proto.Diff sync_result = 7; */
        if (message.syncResult)
            Diff.internalBinaryWrite(message.syncResult, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated bytes resulting_revisions = 8; */
        for (let i = 0; i < message.resultingRevisions.length; i++)
            writer.tag(8, WireType.LengthDelimited).bytes(message.resultingRevisions[i]);
        /* optional bool multiple_heads = 9; */
        if (message.multipleHeads !== undefined)
            writer.tag(9, WireType.Varint).bool(message.multipleHeads);
        /* optional bool up_to_date = 10; */
        if (message.upToDate !== undefined)
            writer.tag(10, WireType.Varint).bool(message.upToDate);
        /* repeated int64 nonces = 14; */
        for (let i = 0; i < message.nonces.length; i++)
            writer.tag(14, WireType.Varint).int64(message.nonces[i]);
        /* optional int64 timestamp = 15; */
        if (message.timestamp !== undefined)
            writer.tag(15, WireType.Varint).int64(message.timestamp);
        /* optional string owner_username = 16; */
        if (message.ownerUsername !== undefined)
            writer.tag(16, WireType.LengthDelimited).string(message.ownerUsername);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.SelectedListContent
 */
export const SelectedListContent = new SelectedListContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateListReply$Type extends MessageType<CreateListReply> {
    constructor() {
        super("spotify.playlist4.proto.CreateListReply", [
            { no: 1, name: "uri", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "revision", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CreateListReply>): CreateListReply {
        const message = { uri: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateListReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateListReply): CreateListReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uri */ 1:
                    message.uri = reader.bytes();
                    break;
                case /* optional bytes revision */ 2:
                    message.revision = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateListReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uri = 1; */
        if (message.uri.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uri);
        /* optional bytes revision = 2; */
        if (message.revision !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.revision);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.CreateListReply
 */
export const CreateListReply = new CreateListReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModifyReply$Type extends MessageType<ModifyReply> {
    constructor() {
        super("spotify.playlist4.proto.ModifyReply", [
            { no: 1, name: "uri", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "revision", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ModifyReply>): ModifyReply {
        const message = { uri: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ModifyReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModifyReply): ModifyReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uri */ 1:
                    message.uri = reader.bytes();
                    break;
                case /* optional bytes revision */ 2:
                    message.revision = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModifyReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uri = 1; */
        if (message.uri.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uri);
        /* optional bytes revision = 2; */
        if (message.revision !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.revision);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.ModifyReply
 */
export const ModifyReply = new ModifyReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeRequest$Type extends MessageType<SubscribeRequest> {
    constructor() {
        super("spotify.playlist4.proto.SubscribeRequest", [
            { no: 1, name: "uris", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeRequest>): SubscribeRequest {
        const message = { uris: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SubscribeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeRequest): SubscribeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes uris */ 1:
                    message.uris.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes uris = 1; */
        for (let i = 0; i < message.uris.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uris[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.SubscribeRequest
 */
export const SubscribeRequest = new SubscribeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnsubscribeRequest$Type extends MessageType<UnsubscribeRequest> {
    constructor() {
        super("spotify.playlist4.proto.UnsubscribeRequest", [
            { no: 1, name: "uris", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UnsubscribeRequest>): UnsubscribeRequest {
        const message = { uris: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnsubscribeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnsubscribeRequest): UnsubscribeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes uris */ 1:
                    message.uris.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnsubscribeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes uris = 1; */
        for (let i = 0; i < message.uris.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uris[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.UnsubscribeRequest
 */
export const UnsubscribeRequest = new UnsubscribeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlaylistModificationInfo$Type extends MessageType<PlaylistModificationInfo> {
    constructor() {
        super("spotify.playlist4.proto.PlaylistModificationInfo", [
            { no: 1, name: "uri", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "new_revision", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "parent_revision", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "ops", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Op }
        ]);
    }
    create(value?: PartialMessage<PlaylistModificationInfo>): PlaylistModificationInfo {
        const message = { ops: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlaylistModificationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlaylistModificationInfo): PlaylistModificationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes uri */ 1:
                    message.uri = reader.bytes();
                    break;
                case /* optional bytes new_revision */ 2:
                    message.newRevision = reader.bytes();
                    break;
                case /* optional bytes parent_revision */ 3:
                    message.parentRevision = reader.bytes();
                    break;
                case /* repeated spotify.playlist4.proto.Op ops */ 4:
                    message.ops.push(Op.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlaylistModificationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes uri = 1; */
        if (message.uri !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uri);
        /* optional bytes new_revision = 2; */
        if (message.newRevision !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.newRevision);
        /* optional bytes parent_revision = 3; */
        if (message.parentRevision !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.parentRevision);
        /* repeated spotify.playlist4.proto.Op ops = 4; */
        for (let i = 0; i < message.ops.length; i++)
            Op.internalBinaryWrite(message.ops[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.playlist4.proto.PlaylistModificationInfo
 */
export const PlaylistModificationInfo = new PlaylistModificationInfo$Type();
