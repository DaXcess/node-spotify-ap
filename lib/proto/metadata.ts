// @generated by protobuf-ts 2.0.6
// @generated from protobuf file "metadata.proto" (package "spotify.metadata.proto", syntax proto2)
// tslint:disable
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spotify.metadata.proto.Artist
 */
export interface Artist {
    /**
     * @generated from protobuf field: optional bytes gid = 1;
     */
    gid?: Uint8Array;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional sint32 popularity = 3;
     */
    popularity?: number;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.TopTracks top_track = 4;
     */
    topTrack: TopTracks[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.AlbumGroup album_group = 5;
     */
    albumGroup: AlbumGroup[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.AlbumGroup single_group = 6;
     */
    singleGroup: AlbumGroup[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.AlbumGroup compilation_group = 7;
     */
    compilationGroup: AlbumGroup[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.AlbumGroup appears_on_group = 8;
     */
    appearsOnGroup: AlbumGroup[];
    /**
     * @generated from protobuf field: repeated string genre = 9;
     */
    genre: string[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.ExternalId external_id = 10;
     */
    externalId: ExternalId[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Image portrait = 11;
     */
    portrait: Image[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Biography biography = 12;
     */
    biography: Biography[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.ActivityPeriod activity_period = 13;
     */
    activityPeriod: ActivityPeriod[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Restriction restriction = 14;
     */
    restriction: Restriction[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Artist related = 15;
     */
    related: Artist[];
    /**
     * @generated from protobuf field: optional bool is_portrait_album_cover = 16;
     */
    isPortraitAlbumCover?: boolean;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.ImageGroup portrait_group = 17;
     */
    portraitGroup?: ImageGroup;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.SalePeriod sale_period = 18;
     */
    salePeriod: SalePeriod[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Availability availability = 20;
     */
    availability: Availability[];
}
/**
 * @generated from protobuf message spotify.metadata.proto.Album
 */
export interface Album {
    /**
     * @generated from protobuf field: optional bytes gid = 1;
     */
    gid?: Uint8Array;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Artist artist = 3;
     */
    artist: Artist[];
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Album.Type type = 4;
     */
    type?: Album_Type;
    /**
     * @generated from protobuf field: optional string label = 5;
     */
    label?: string;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Date date = 6;
     */
    date?: Date;
    /**
     * @generated from protobuf field: optional sint32 popularity = 7;
     */
    popularity?: number;
    /**
     * @generated from protobuf field: repeated string genre = 8;
     */
    genre: string[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Image cover = 9;
     */
    cover: Image[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.ExternalId external_id = 10;
     */
    externalId: ExternalId[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Disc disc = 11;
     */
    disc: Disc[];
    /**
     * @generated from protobuf field: repeated string review = 12;
     */
    review: string[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Copyright copyright = 13;
     */
    copyright: Copyright[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Restriction restriction = 14;
     */
    restriction: Restriction[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Album related = 15;
     */
    related: Album[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.SalePeriod sale_period = 16;
     */
    salePeriod: SalePeriod[];
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.ImageGroup cover_group = 17;
     */
    coverGroup?: ImageGroup;
    /**
     * @generated from protobuf field: optional string original_title = 18;
     */
    originalTitle?: string;
    /**
     * @generated from protobuf field: optional string version_title = 19;
     */
    versionTitle?: string;
    /**
     * @generated from protobuf field: optional string type_str = 20;
     */
    typeStr?: string;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Availability availability = 23;
     */
    availability: Availability[];
}
/**
 * @generated from protobuf enum spotify.metadata.proto.Album.Type
 */
export enum Album_Type {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: ALBUM = 1;
     */
    ALBUM = 1,
    /**
     * @generated from protobuf enum value: SINGLE = 2;
     */
    SINGLE = 2,
    /**
     * @generated from protobuf enum value: COMPILATION = 3;
     */
    COMPILATION = 3,
    /**
     * @generated from protobuf enum value: EP = 4;
     */
    EP = 4,
    /**
     * @generated from protobuf enum value: AUDIOBOOK = 5;
     */
    AUDIOBOOK = 5,
    /**
     * @generated from protobuf enum value: PODCAST = 6;
     */
    PODCAST = 6
}
/**
 * @generated from protobuf message spotify.metadata.proto.Track
 */
export interface Track {
    /**
     * @generated from protobuf field: optional bytes gid = 1;
     */
    gid?: Uint8Array;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Album album = 3;
     */
    album?: Album;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Artist artist = 4;
     */
    artist: Artist[];
    /**
     * @generated from protobuf field: optional sint32 number = 5;
     */
    number?: number;
    /**
     * @generated from protobuf field: optional sint32 disc_number = 6;
     */
    discNumber?: number;
    /**
     * @generated from protobuf field: optional sint32 duration = 7;
     */
    duration?: number;
    /**
     * @generated from protobuf field: optional sint32 popularity = 8;
     */
    popularity?: number;
    /**
     * @generated from protobuf field: optional bool explicit = 9;
     */
    explicit?: boolean;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.ExternalId external_id = 10;
     */
    externalId: ExternalId[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Restriction restriction = 11;
     */
    restriction: Restriction[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.AudioFile file = 12;
     */
    file: AudioFile[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Track alternative = 13;
     */
    alternative: Track[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.SalePeriod sale_period = 14;
     */
    salePeriod: SalePeriod[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.AudioFile preview = 15;
     */
    preview: AudioFile[];
    /**
     * @generated from protobuf field: repeated string tags = 16;
     */
    tags: string[];
    /**
     * @generated from protobuf field: optional int64 earliest_live_timestamp = 17;
     */
    earliestLiveTimestamp?: bigint;
    /**
     * @generated from protobuf field: optional bool has_lyrics = 18;
     */
    hasLyrics?: boolean;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Availability availability = 19;
     */
    availability: Availability[];
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Licensor licensor = 21;
     */
    licensor?: Licensor;
}
/**
 * @generated from protobuf message spotify.metadata.proto.Show
 */
export interface Show {
    /**
     * @generated from protobuf field: optional bytes gid = 1;
     */
    gid?: Uint8Array;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string description = 64;
     */
    description?: string;
    /**
     * @deprecated
     * @generated from protobuf field: optional sint32 deprecated_popularity = 65 [deprecated = true];
     */
    deprecatedPopularity?: number;
    /**
     * @generated from protobuf field: optional string publisher = 66;
     */
    publisher?: string;
    /**
     * @generated from protobuf field: optional string language = 67;
     */
    language?: string;
    /**
     * @generated from protobuf field: optional bool explicit = 68;
     */
    explicit?: boolean;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.ImageGroup cover_image = 69;
     */
    coverImage?: ImageGroup;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Episode episode = 70;
     */
    episode: Episode[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Copyright copyright = 71;
     */
    copyright: Copyright[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Restriction restriction = 72;
     */
    restriction: Restriction[];
    /**
     * @generated from protobuf field: repeated string keyword = 73;
     */
    keyword: string[];
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Show.MediaType media_type = 74;
     */
    mediaType?: Show_MediaType;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Show.ConsumptionOrder consumption_order = 75;
     */
    consumptionOrder?: Show_ConsumptionOrder;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Availability availability = 78;
     */
    availability: Availability[];
    /**
     * @generated from protobuf field: optional string trailer_uri = 83;
     */
    trailerUri?: string;
}
/**
 * @generated from protobuf enum spotify.metadata.proto.Show.MediaType
 */
export enum Show_MediaType {
    /**
     * @generated from protobuf enum value: MIXED = 0;
     */
    MIXED = 0,
    /**
     * @generated from protobuf enum value: AUDIO = 1;
     */
    AUDIO = 1,
    /**
     * @generated from protobuf enum value: VIDEO = 2;
     */
    VIDEO = 2
}
/**
 * @generated from protobuf enum spotify.metadata.proto.Show.ConsumptionOrder
 */
export enum Show_ConsumptionOrder {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: SEQUENTIAL = 1;
     */
    SEQUENTIAL = 1,
    /**
     * @generated from protobuf enum value: EPISODIC = 2;
     */
    EPISODIC = 2,
    /**
     * @generated from protobuf enum value: RECENT = 3;
     */
    RECENT = 3
}
/**
 * @generated from protobuf message spotify.metadata.proto.Episode
 */
export interface Episode {
    /**
     * @generated from protobuf field: optional bytes gid = 1;
     */
    gid?: Uint8Array;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional sint32 duration = 7;
     */
    duration?: number;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.AudioFile audio = 12;
     */
    audio: AudioFile[];
    /**
     * @generated from protobuf field: optional string description = 64;
     */
    description?: string;
    /**
     * @generated from protobuf field: optional sint32 number = 65;
     */
    number?: number;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Date publish_time = 66;
     */
    publishTime?: Date;
    /**
     * @deprecated
     * @generated from protobuf field: optional sint32 deprecated_popularity = 67 [deprecated = true];
     */
    deprecatedPopularity?: number;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.ImageGroup cover_image = 68;
     */
    coverImage?: ImageGroup;
    /**
     * @generated from protobuf field: optional string language = 69;
     */
    language?: string;
    /**
     * @generated from protobuf field: optional bool explicit = 70;
     */
    explicit?: boolean;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Show show = 71;
     */
    show?: Show;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.VideoFile video = 72;
     */
    video: VideoFile[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.VideoFile video_preview = 73;
     */
    videoPreview: VideoFile[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.AudioFile audio_preview = 74;
     */
    audioPreview: AudioFile[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Restriction restriction = 75;
     */
    restriction: Restriction[];
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.ImageGroup freeze_frame = 76;
     */
    freezeFrame?: ImageGroup;
    /**
     * @generated from protobuf field: repeated string keyword = 77;
     */
    keyword: string[];
    /**
     * @generated from protobuf field: optional bool allow_background_playback = 81;
     */
    allowBackgroundPlayback?: boolean;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Availability availability = 82;
     */
    availability: Availability[];
    /**
     * @generated from protobuf field: optional string external_url = 83;
     */
    externalUrl?: string;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Episode.EpisodeType type = 87;
     */
    type?: Episode_EpisodeType;
}
/**
 * @generated from protobuf enum spotify.metadata.proto.Episode.EpisodeType
 */
export enum Episode_EpisodeType {
    /**
     * @generated from protobuf enum value: FULL = 0;
     */
    FULL = 0,
    /**
     * @generated from protobuf enum value: TRAILER = 1;
     */
    TRAILER = 1,
    /**
     * @generated from protobuf enum value: BONUS = 2;
     */
    BONUS = 2
}
/**
 * @generated from protobuf message spotify.metadata.proto.Licensor
 */
export interface Licensor {
    /**
     * @generated from protobuf field: optional bytes uuid = 1;
     */
    uuid?: Uint8Array;
}
/**
 * @generated from protobuf message spotify.metadata.proto.TopTracks
 */
export interface TopTracks {
    /**
     * @generated from protobuf field: optional string country = 1;
     */
    country?: string;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Track track = 2;
     */
    track: Track[];
}
/**
 * @generated from protobuf message spotify.metadata.proto.ActivityPeriod
 */
export interface ActivityPeriod {
    /**
     * @generated from protobuf field: optional sint32 start_year = 1;
     */
    startYear?: number;
    /**
     * @generated from protobuf field: optional sint32 end_year = 2;
     */
    endYear?: number;
    /**
     * @generated from protobuf field: optional sint32 decade = 3;
     */
    decade?: number;
}
/**
 * @generated from protobuf message spotify.metadata.proto.AlbumGroup
 */
export interface AlbumGroup {
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Album album = 1;
     */
    album: Album[];
}
/**
 * @generated from protobuf message spotify.metadata.proto.Date
 */
export interface Date {
    /**
     * @generated from protobuf field: optional sint32 year = 1;
     */
    year?: number;
    /**
     * @generated from protobuf field: optional sint32 month = 2;
     */
    month?: number;
    /**
     * @generated from protobuf field: optional sint32 day = 3;
     */
    day?: number;
    /**
     * @generated from protobuf field: optional sint32 hour = 4;
     */
    hour?: number;
    /**
     * @generated from protobuf field: optional sint32 minute = 5;
     */
    minute?: number;
}
/**
 * @generated from protobuf message spotify.metadata.proto.Image
 */
export interface Image {
    /**
     * @generated from protobuf field: optional bytes file_id = 1;
     */
    fileId?: Uint8Array;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Image.Size size = 2;
     */
    size?: Image_Size;
    /**
     * @generated from protobuf field: optional sint32 width = 3;
     */
    width?: number;
    /**
     * @generated from protobuf field: optional sint32 height = 4;
     */
    height?: number;
}
/**
 * @generated from protobuf enum spotify.metadata.proto.Image.Size
 */
export enum Image_Size {
    /**
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * @generated from protobuf enum value: SMALL = 1;
     */
    SMALL = 1,
    /**
     * @generated from protobuf enum value: LARGE = 2;
     */
    LARGE = 2,
    /**
     * @generated from protobuf enum value: XLARGE = 3;
     */
    XLARGE = 3
}
/**
 * @generated from protobuf message spotify.metadata.proto.ImageGroup
 */
export interface ImageGroup {
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Image image = 1;
     */
    image: Image[];
}
/**
 * @generated from protobuf message spotify.metadata.proto.Biography
 */
export interface Biography {
    /**
     * @generated from protobuf field: optional string text = 1;
     */
    text?: string;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Image portrait = 2;
     */
    portrait: Image[];
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.ImageGroup portrait_group = 3;
     */
    portraitGroup: ImageGroup[];
}
/**
 * @generated from protobuf message spotify.metadata.proto.Disc
 */
export interface Disc {
    /**
     * @generated from protobuf field: optional sint32 number = 1;
     */
    number?: number;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Track track = 3;
     */
    track: Track[];
}
/**
 * @generated from protobuf message spotify.metadata.proto.Copyright
 */
export interface Copyright {
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Copyright.Type type = 1;
     */
    type?: Copyright_Type;
    /**
     * @generated from protobuf field: optional string text = 2;
     */
    text?: string;
}
/**
 * @generated from protobuf enum spotify.metadata.proto.Copyright.Type
 */
export enum Copyright_Type {
    /**
     * @generated from protobuf enum value: P = 0;
     */
    P = 0,
    /**
     * @generated from protobuf enum value: C = 1;
     */
    C = 1
}
/**
 * @generated from protobuf message spotify.metadata.proto.Restriction
 */
export interface Restriction {
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Restriction.Catalogue catalogue = 1;
     */
    catalogue: Restriction_Catalogue[];
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Restriction.Type type = 4;
     */
    type?: Restriction_Type;
    /**
     * @generated from protobuf field: repeated string catalogue_str = 5;
     */
    catalogueStr: string[];
    /**
     * @generated from protobuf oneof: country_restriction
     */
    countryRestriction: {
        oneofKind: "countriesAllowed";
        /**
         * @generated from protobuf field: string countries_allowed = 2;
         */
        countriesAllowed: string;
    } | {
        oneofKind: "countriesForbidden";
        /**
         * @generated from protobuf field: string countries_forbidden = 3;
         */
        countriesForbidden: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum spotify.metadata.proto.Restriction.Catalogue
 */
export enum Restriction_Catalogue {
    /**
     * @generated from protobuf enum value: AD = 0;
     */
    AD = 0,
    /**
     * @generated from protobuf enum value: SUBSCRIPTION = 1;
     */
    SUBSCRIPTION = 1,
    /**
     * @generated from protobuf enum value: CATALOGUE_ALL = 2;
     */
    CATALOGUE_ALL = 2,
    /**
     * @generated from protobuf enum value: SHUFFLE = 3;
     */
    SHUFFLE = 3,
    /**
     * @generated from protobuf enum value: COMMERCIAL = 4;
     */
    COMMERCIAL = 4
}
/**
 * @generated from protobuf enum spotify.metadata.proto.Restriction.Type
 */
export enum Restriction_Type {
    /**
     * @generated from protobuf enum value: STREAMING = 0;
     */
    STREAMING = 0
}
/**
 * @generated from protobuf message spotify.metadata.proto.Availability
 */
export interface Availability {
    /**
     * @generated from protobuf field: repeated string catalogue_str = 1;
     */
    catalogueStr: string[];
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Date start = 2;
     */
    start?: Date;
}
/**
 * @generated from protobuf message spotify.metadata.proto.SalePeriod
 */
export interface SalePeriod {
    /**
     * @generated from protobuf field: repeated spotify.metadata.proto.Restriction restriction = 1;
     */
    restriction: Restriction[];
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Date start = 2;
     */
    start?: Date;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.Date end = 3;
     */
    end?: Date;
}
/**
 * @generated from protobuf message spotify.metadata.proto.ExternalId
 */
export interface ExternalId {
    /**
     * @generated from protobuf field: optional string type = 1;
     */
    type?: string;
    /**
     * @generated from protobuf field: optional string id = 2;
     */
    id?: string;
}
/**
 * @generated from protobuf message spotify.metadata.proto.AudioFile
 */
export interface AudioFile {
    /**
     * @generated from protobuf field: optional bytes file_id = 1;
     */
    fileId?: Uint8Array;
    /**
     * @generated from protobuf field: optional spotify.metadata.proto.AudioFile.Format format = 2;
     */
    format?: AudioFile_Format;
}
/**
 * @generated from protobuf enum spotify.metadata.proto.AudioFile.Format
 */
export enum AudioFile_Format {
    /**
     * @generated from protobuf enum value: OGG_VORBIS_96 = 0;
     */
    OGG_VORBIS_96 = 0,
    /**
     * @generated from protobuf enum value: OGG_VORBIS_160 = 1;
     */
    OGG_VORBIS_160 = 1,
    /**
     * @generated from protobuf enum value: OGG_VORBIS_320 = 2;
     */
    OGG_VORBIS_320 = 2,
    /**
     * @generated from protobuf enum value: MP3_256 = 3;
     */
    MP3_256 = 3,
    /**
     * @generated from protobuf enum value: MP3_320 = 4;
     */
    MP3_320 = 4,
    /**
     * @generated from protobuf enum value: MP3_160 = 5;
     */
    MP3_160 = 5,
    /**
     * @generated from protobuf enum value: MP3_96 = 6;
     */
    MP3_96 = 6,
    /**
     * @generated from protobuf enum value: MP3_160_ENC = 7;
     */
    MP3_160_ENC = 7,
    /**
     * @generated from protobuf enum value: AAC_24 = 8;
     */
    AAC_24 = 8,
    /**
     * @generated from protobuf enum value: AAC_48 = 9;
     */
    AAC_48 = 9,
    /**
     * @generated from protobuf enum value: AAC_24_NORM = 16;
     */
    AAC_24_NORM = 16
}
/**
 * @generated from protobuf message spotify.metadata.proto.VideoFile
 */
export interface VideoFile {
    /**
     * @generated from protobuf field: optional bytes file_id = 1;
     */
    fileId?: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class Artist$Type extends MessageType<Artist> {
    constructor() {
        super("spotify.metadata.proto.Artist", [
            { no: 1, name: "gid", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "popularity", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 4, name: "top_track", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TopTracks },
            { no: 5, name: "album_group", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AlbumGroup },
            { no: 6, name: "single_group", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AlbumGroup },
            { no: 7, name: "compilation_group", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AlbumGroup },
            { no: 8, name: "appears_on_group", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AlbumGroup },
            { no: 9, name: "genre", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "external_id", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExternalId },
            { no: 11, name: "portrait", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Image },
            { no: 12, name: "biography", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Biography },
            { no: 13, name: "activity_period", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ActivityPeriod },
            { no: 14, name: "restriction", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Restriction },
            { no: 15, name: "related", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Artist },
            { no: 16, name: "is_portrait_album_cover", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "portrait_group", kind: "message", T: () => ImageGroup },
            { no: 18, name: "sale_period", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SalePeriod },
            { no: 20, name: "availability", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Availability }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Artist
 */
export const Artist = new Artist$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Album$Type extends MessageType<Album> {
    constructor() {
        super("spotify.metadata.proto.Album", [
            { no: 1, name: "gid", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "artist", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Artist },
            { no: 4, name: "type", kind: "enum", opt: true, T: () => ["spotify.metadata.proto.Album.Type", Album_Type] },
            { no: 5, name: "label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "date", kind: "message", T: () => Date },
            { no: 7, name: "popularity", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 8, name: "genre", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "cover", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Image },
            { no: 10, name: "external_id", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExternalId },
            { no: 11, name: "disc", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Disc },
            { no: 12, name: "review", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "copyright", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Copyright },
            { no: 14, name: "restriction", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Restriction },
            { no: 15, name: "related", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Album },
            { no: 16, name: "sale_period", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SalePeriod },
            { no: 17, name: "cover_group", kind: "message", T: () => ImageGroup },
            { no: 18, name: "original_title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "version_title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "type_str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "availability", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Availability }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Album
 */
export const Album = new Album$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Track$Type extends MessageType<Track> {
    constructor() {
        super("spotify.metadata.proto.Track", [
            { no: 1, name: "gid", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "album", kind: "message", T: () => Album },
            { no: 4, name: "artist", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Artist },
            { no: 5, name: "number", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 6, name: "disc_number", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 7, name: "duration", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 8, name: "popularity", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 9, name: "explicit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "external_id", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExternalId },
            { no: 11, name: "restriction", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Restriction },
            { no: 12, name: "file", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AudioFile },
            { no: 13, name: "alternative", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Track },
            { no: 14, name: "sale_period", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SalePeriod },
            { no: 15, name: "preview", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AudioFile },
            { no: 16, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "earliest_live_timestamp", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 18, name: "has_lyrics", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "availability", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Availability },
            { no: 21, name: "licensor", kind: "message", T: () => Licensor }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Track
 */
export const Track = new Track$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Show$Type extends MessageType<Show> {
    constructor() {
        super("spotify.metadata.proto.Show", [
            { no: 1, name: "gid", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 64, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 65, name: "deprecated_popularity", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 66, name: "publisher", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 67, name: "language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 68, name: "explicit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 69, name: "cover_image", kind: "message", T: () => ImageGroup },
            { no: 70, name: "episode", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Episode },
            { no: 71, name: "copyright", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Copyright },
            { no: 72, name: "restriction", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Restriction },
            { no: 73, name: "keyword", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 74, name: "media_type", kind: "enum", opt: true, T: () => ["spotify.metadata.proto.Show.MediaType", Show_MediaType] },
            { no: 75, name: "consumption_order", kind: "enum", opt: true, T: () => ["spotify.metadata.proto.Show.ConsumptionOrder", Show_ConsumptionOrder] },
            { no: 78, name: "availability", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Availability },
            { no: 83, name: "trailer_uri", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Show
 */
export const Show = new Show$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Episode$Type extends MessageType<Episode> {
    constructor() {
        super("spotify.metadata.proto.Episode", [
            { no: 1, name: "gid", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "duration", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 12, name: "audio", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AudioFile },
            { no: 64, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 65, name: "number", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 66, name: "publish_time", kind: "message", T: () => Date },
            { no: 67, name: "deprecated_popularity", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 68, name: "cover_image", kind: "message", T: () => ImageGroup },
            { no: 69, name: "language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 70, name: "explicit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 71, name: "show", kind: "message", T: () => Show },
            { no: 72, name: "video", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => VideoFile },
            { no: 73, name: "video_preview", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => VideoFile },
            { no: 74, name: "audio_preview", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AudioFile },
            { no: 75, name: "restriction", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Restriction },
            { no: 76, name: "freeze_frame", kind: "message", T: () => ImageGroup },
            { no: 77, name: "keyword", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 81, name: "allow_background_playback", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 82, name: "availability", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Availability },
            { no: 83, name: "external_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 87, name: "type", kind: "enum", opt: true, T: () => ["spotify.metadata.proto.Episode.EpisodeType", Episode_EpisodeType] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Episode
 */
export const Episode = new Episode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Licensor$Type extends MessageType<Licensor> {
    constructor() {
        super("spotify.metadata.proto.Licensor", [
            { no: 1, name: "uuid", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Licensor
 */
export const Licensor = new Licensor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TopTracks$Type extends MessageType<TopTracks> {
    constructor() {
        super("spotify.metadata.proto.TopTracks", [
            { no: 1, name: "country", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "track", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Track }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.TopTracks
 */
export const TopTracks = new TopTracks$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityPeriod$Type extends MessageType<ActivityPeriod> {
    constructor() {
        super("spotify.metadata.proto.ActivityPeriod", [
            { no: 1, name: "start_year", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 2, name: "end_year", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 3, name: "decade", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.ActivityPeriod
 */
export const ActivityPeriod = new ActivityPeriod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlbumGroup$Type extends MessageType<AlbumGroup> {
    constructor() {
        super("spotify.metadata.proto.AlbumGroup", [
            { no: 1, name: "album", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Album }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.AlbumGroup
 */
export const AlbumGroup = new AlbumGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Date$Type extends MessageType<Date> {
    constructor() {
        super("spotify.metadata.proto.Date", [
            { no: 1, name: "year", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 2, name: "month", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 3, name: "day", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 4, name: "hour", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 5, name: "minute", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Date
 */
export const Date = new Date$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Image$Type extends MessageType<Image> {
    constructor() {
        super("spotify.metadata.proto.Image", [
            { no: 1, name: "file_id", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "size", kind: "enum", opt: true, T: () => ["spotify.metadata.proto.Image.Size", Image_Size] },
            { no: 3, name: "width", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 4, name: "height", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Image
 */
export const Image = new Image$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageGroup$Type extends MessageType<ImageGroup> {
    constructor() {
        super("spotify.metadata.proto.ImageGroup", [
            { no: 1, name: "image", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Image }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.ImageGroup
 */
export const ImageGroup = new ImageGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Biography$Type extends MessageType<Biography> {
    constructor() {
        super("spotify.metadata.proto.Biography", [
            { no: 1, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "portrait", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Image },
            { no: 3, name: "portrait_group", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ImageGroup }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Biography
 */
export const Biography = new Biography$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Disc$Type extends MessageType<Disc> {
    constructor() {
        super("spotify.metadata.proto.Disc", [
            { no: 1, name: "number", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "track", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Track }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Disc
 */
export const Disc = new Disc$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Copyright$Type extends MessageType<Copyright> {
    constructor() {
        super("spotify.metadata.proto.Copyright", [
            { no: 1, name: "type", kind: "enum", opt: true, T: () => ["spotify.metadata.proto.Copyright.Type", Copyright_Type] },
            { no: 2, name: "text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Copyright
 */
export const Copyright = new Copyright$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Restriction$Type extends MessageType<Restriction> {
    constructor() {
        super("spotify.metadata.proto.Restriction", [
            { no: 1, name: "catalogue", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["spotify.metadata.proto.Restriction.Catalogue", Restriction_Catalogue] },
            { no: 4, name: "type", kind: "enum", opt: true, T: () => ["spotify.metadata.proto.Restriction.Type", Restriction_Type] },
            { no: 5, name: "catalogue_str", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "countries_allowed", kind: "scalar", oneof: "countryRestriction", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "countries_forbidden", kind: "scalar", oneof: "countryRestriction", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Restriction
 */
export const Restriction = new Restriction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Availability$Type extends MessageType<Availability> {
    constructor() {
        super("spotify.metadata.proto.Availability", [
            { no: 1, name: "catalogue_str", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start", kind: "message", T: () => Date }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.Availability
 */
export const Availability = new Availability$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalePeriod$Type extends MessageType<SalePeriod> {
    constructor() {
        super("spotify.metadata.proto.SalePeriod", [
            { no: 1, name: "restriction", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Restriction },
            { no: 2, name: "start", kind: "message", T: () => Date },
            { no: 3, name: "end", kind: "message", T: () => Date }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.SalePeriod
 */
export const SalePeriod = new SalePeriod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExternalId$Type extends MessageType<ExternalId> {
    constructor() {
        super("spotify.metadata.proto.ExternalId", [
            { no: 1, name: "type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.ExternalId
 */
export const ExternalId = new ExternalId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AudioFile$Type extends MessageType<AudioFile> {
    constructor() {
        super("spotify.metadata.proto.AudioFile", [
            { no: 1, name: "file_id", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "format", kind: "enum", opt: true, T: () => ["spotify.metadata.proto.AudioFile.Format", AudioFile_Format] }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.AudioFile
 */
export const AudioFile = new AudioFile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoFile$Type extends MessageType<VideoFile> {
    constructor() {
        super("spotify.metadata.proto.VideoFile", [
            { no: 1, name: "file_id", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
}
/**
 * @generated MessageType for protobuf message spotify.metadata.proto.VideoFile
 */
export const VideoFile = new VideoFile$Type();
