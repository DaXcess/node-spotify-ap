// @generated by protobuf-ts 2.0.6
// @generated from protobuf file "pubsub.proto" (package "spotify", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spotify.Subscription
 */
export interface Subscription {
    /**
     * @generated from protobuf field: optional string uri = 1;
     */
    uri?: string;
    /**
     * @generated from protobuf field: optional int32 expiry = 2;
     */
    expiry?: number;
    /**
     * @generated from protobuf field: optional int32 status_code = 3;
     */
    statusCode?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Subscription$Type extends MessageType<Subscription> {
    constructor() {
        super("spotify.Subscription", [
            { no: 1, name: "uri", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "expiry", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "status_code", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Subscription>): Subscription {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Subscription>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Subscription): Subscription {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string uri */ 1:
                    message.uri = reader.string();
                    break;
                case /* optional int32 expiry */ 2:
                    message.expiry = reader.int32();
                    break;
                case /* optional int32 status_code */ 3:
                    message.statusCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Subscription, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string uri = 1; */
        if (message.uri !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.uri);
        /* optional int32 expiry = 2; */
        if (message.expiry !== undefined)
            writer.tag(2, WireType.Varint).int32(message.expiry);
        /* optional int32 status_code = 3; */
        if (message.statusCode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.statusCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.Subscription
 */
export const Subscription = new Subscription$Type();
