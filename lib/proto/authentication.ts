// @generated by protobuf-ts 2.0.6
// @generated from protobuf file "authentication.proto" (package "spotify", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spotify.ClientResponseEncrypted
 */
export interface ClientResponseEncrypted {
    /**
     * @generated from protobuf field: spotify.LoginCredentials login_credentials = 10;
     */
    loginCredentials?: LoginCredentials;
    /**
     * @generated from protobuf field: optional spotify.AccountCreation account_creation = 20;
     */
    accountCreation?: AccountCreation;
    /**
     * @generated from protobuf field: optional spotify.FingerprintResponseUnion fingerprint_response = 30;
     */
    fingerprintResponse?: FingerprintResponseUnion;
    /**
     * @generated from protobuf field: optional spotify.PeerTicketUnion peer_ticket = 40;
     */
    peerTicket?: PeerTicketUnion;
    /**
     * @generated from protobuf field: spotify.SystemInfo system_info = 50;
     */
    systemInfo?: SystemInfo;
    /**
     * @generated from protobuf field: optional string platform_model = 60;
     */
    platformModel?: string;
    /**
     * @generated from protobuf field: optional string version_string = 70;
     */
    versionString?: string;
    /**
     * @generated from protobuf field: optional spotify.LibspotifyAppKey appkey = 80;
     */
    appkey?: LibspotifyAppKey;
    /**
     * @generated from protobuf field: optional spotify.ClientInfo client_info = 90;
     */
    clientInfo?: ClientInfo;
}
/**
 * @generated from protobuf message spotify.LoginCredentials
 */
export interface LoginCredentials {
    /**
     * @generated from protobuf field: optional string username = 10;
     */
    username?: string;
    /**
     * @generated from protobuf field: spotify.AuthenticationType typ = 20;
     */
    typ: AuthenticationType;
    /**
     * @generated from protobuf field: optional bytes auth_data = 30;
     */
    authData?: Uint8Array;
}
/**
 * @generated from protobuf message spotify.FingerprintResponseUnion
 */
export interface FingerprintResponseUnion {
    /**
     * @generated from protobuf field: optional spotify.FingerprintGrainResponse grain = 10;
     */
    grain?: FingerprintGrainResponse;
    /**
     * @generated from protobuf field: optional spotify.FingerprintHmacRipemdResponse hmac_ripemd = 20;
     */
    hmacRipemd?: FingerprintHmacRipemdResponse;
}
/**
 * @generated from protobuf message spotify.FingerprintGrainResponse
 */
export interface FingerprintGrainResponse {
    /**
     * @generated from protobuf field: bytes encrypted_key = 10;
     */
    encryptedKey: Uint8Array;
}
/**
 * @generated from protobuf message spotify.FingerprintHmacRipemdResponse
 */
export interface FingerprintHmacRipemdResponse {
    /**
     * @generated from protobuf field: bytes hmac = 10;
     */
    hmac: Uint8Array;
}
/**
 * @generated from protobuf message spotify.PeerTicketUnion
 */
export interface PeerTicketUnion {
    /**
     * @generated from protobuf field: optional spotify.PeerTicketPublicKey public_key = 10;
     */
    publicKey?: PeerTicketPublicKey;
    /**
     * @generated from protobuf field: optional spotify.PeerTicketOld old_ticket = 20;
     */
    oldTicket?: PeerTicketOld;
}
/**
 * @generated from protobuf message spotify.PeerTicketPublicKey
 */
export interface PeerTicketPublicKey {
    /**
     * @generated from protobuf field: bytes public_key = 10;
     */
    publicKey: Uint8Array;
}
/**
 * @generated from protobuf message spotify.PeerTicketOld
 */
export interface PeerTicketOld {
    /**
     * @generated from protobuf field: bytes peer_ticket = 10;
     */
    peerTicket: Uint8Array;
    /**
     * @generated from protobuf field: bytes peer_ticket_signature = 20;
     */
    peerTicketSignature: Uint8Array;
}
/**
 * @generated from protobuf message spotify.SystemInfo
 */
export interface SystemInfo {
    /**
     * @generated from protobuf field: spotify.CpuFamily cpu_family = 10;
     */
    cpuFamily: CpuFamily;
    /**
     * @generated from protobuf field: optional uint32 cpu_subtype = 20;
     */
    cpuSubtype?: number;
    /**
     * @generated from protobuf field: optional uint32 cpu_ext = 30;
     */
    cpuExt?: number;
    /**
     * @generated from protobuf field: optional spotify.Brand brand = 40;
     */
    brand?: Brand;
    /**
     * @generated from protobuf field: optional uint32 brand_flags = 50;
     */
    brandFlags?: number;
    /**
     * @generated from protobuf field: spotify.Os os = 60;
     */
    os: Os;
    /**
     * @generated from protobuf field: optional uint32 os_version = 70;
     */
    osVersion?: number;
    /**
     * @generated from protobuf field: optional uint32 os_ext = 80;
     */
    osExt?: number;
    /**
     * @generated from protobuf field: optional string system_information_string = 90;
     */
    systemInformationString?: string;
    /**
     * @generated from protobuf field: optional string device_id = 100;
     */
    deviceId?: string;
}
/**
 * @generated from protobuf message spotify.LibspotifyAppKey
 */
export interface LibspotifyAppKey {
    /**
     * @generated from protobuf field: uint32 version = 1;
     */
    version: number;
    /**
     * @generated from protobuf field: bytes devkey = 2;
     */
    devkey: Uint8Array;
    /**
     * @generated from protobuf field: bytes signature = 3;
     */
    signature: Uint8Array;
    /**
     * @generated from protobuf field: string useragent = 4;
     */
    useragent: string;
    /**
     * @generated from protobuf field: bytes callback_hash = 5;
     */
    callbackHash: Uint8Array;
}
/**
 * @generated from protobuf message spotify.ClientInfo
 */
export interface ClientInfo {
    /**
     * @generated from protobuf field: optional bool limited = 1;
     */
    limited?: boolean;
    /**
     * @generated from protobuf field: optional spotify.ClientInfoFacebook fb = 2;
     */
    fb?: ClientInfoFacebook;
    /**
     * @generated from protobuf field: optional string language = 3;
     */
    language?: string;
}
/**
 * @generated from protobuf message spotify.ClientInfoFacebook
 */
export interface ClientInfoFacebook {
    /**
     * @generated from protobuf field: optional string machine_id = 1;
     */
    machineId?: string;
}
/**
 * @generated from protobuf message spotify.APWelcome
 */
export interface APWelcome {
    /**
     * @generated from protobuf field: string canonical_username = 10;
     */
    canonicalUsername: string;
    /**
     * @generated from protobuf field: spotify.AccountType account_type_logged_in = 20;
     */
    accountTypeLoggedIn: AccountType;
    /**
     * @generated from protobuf field: spotify.AccountType credentials_type_logged_in = 25;
     */
    credentialsTypeLoggedIn: AccountType;
    /**
     * @generated from protobuf field: spotify.AuthenticationType reusable_auth_credentials_type = 30;
     */
    reusableAuthCredentialsType: AuthenticationType;
    /**
     * @generated from protobuf field: bytes reusable_auth_credentials = 40;
     */
    reusableAuthCredentials: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes lfs_secret = 50;
     */
    lfsSecret?: Uint8Array;
    /**
     * @generated from protobuf field: optional spotify.AccountInfo account_info = 60;
     */
    accountInfo?: AccountInfo;
    /**
     * @generated from protobuf field: optional spotify.AccountInfoFacebook fb = 70;
     */
    fb?: AccountInfoFacebook;
}
/**
 * @generated from protobuf message spotify.AccountInfo
 */
export interface AccountInfo {
    /**
     * @generated from protobuf field: optional spotify.AccountInfoSpotify spotify = 1;
     */
    spotify?: AccountInfoSpotify;
    /**
     * @generated from protobuf field: optional spotify.AccountInfoFacebook facebook = 2;
     */
    facebook?: AccountInfoFacebook;
}
/**
 * @generated from protobuf message spotify.AccountInfoSpotify
 */
export interface AccountInfoSpotify {
}
/**
 * @generated from protobuf message spotify.AccountInfoFacebook
 */
export interface AccountInfoFacebook {
    /**
     * @generated from protobuf field: optional string access_token = 1;
     */
    accessToken?: string;
    /**
     * @generated from protobuf field: optional string machine_id = 2;
     */
    machineId?: string;
}
/**
 * @generated from protobuf enum spotify.AuthenticationType
 */
export enum AuthenticationType {
    /**
     * @generated from protobuf enum value: AUTHENTICATION_USER_PASS = 0;
     */
    AUTHENTICATION_USER_PASS = 0,
    /**
     * @generated from protobuf enum value: AUTHENTICATION_STORED_SPOTIFY_CREDENTIALS = 1;
     */
    AUTHENTICATION_STORED_SPOTIFY_CREDENTIALS = 1,
    /**
     * @generated from protobuf enum value: AUTHENTICATION_STORED_FACEBOOK_CREDENTIALS = 2;
     */
    AUTHENTICATION_STORED_FACEBOOK_CREDENTIALS = 2,
    /**
     * @generated from protobuf enum value: AUTHENTICATION_SPOTIFY_TOKEN = 3;
     */
    AUTHENTICATION_SPOTIFY_TOKEN = 3,
    /**
     * @generated from protobuf enum value: AUTHENTICATION_FACEBOOK_TOKEN = 4;
     */
    AUTHENTICATION_FACEBOOK_TOKEN = 4
}
/**
 * @generated from protobuf enum spotify.AccountCreation
 */
export enum AccountCreation {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: ACCOUNT_CREATION_ALWAYS_PROMPT = 1;
     */
    ALWAYS_PROMPT = 1,
    /**
     * @generated from protobuf enum value: ACCOUNT_CREATION_ALWAYS_CREATE = 3;
     */
    ALWAYS_CREATE = 3
}
/**
 * @generated from protobuf enum spotify.CpuFamily
 */
export enum CpuFamily {
    /**
     * @generated from protobuf enum value: CPU_UNKNOWN = 0;
     */
    CPU_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: CPU_X86 = 1;
     */
    CPU_X86 = 1,
    /**
     * @generated from protobuf enum value: CPU_X86_64 = 2;
     */
    CPU_X86_64 = 2,
    /**
     * @generated from protobuf enum value: CPU_PPC = 3;
     */
    CPU_PPC = 3,
    /**
     * @generated from protobuf enum value: CPU_PPC_64 = 4;
     */
    CPU_PPC_64 = 4,
    /**
     * @generated from protobuf enum value: CPU_ARM = 5;
     */
    CPU_ARM = 5,
    /**
     * @generated from protobuf enum value: CPU_IA64 = 6;
     */
    CPU_IA64 = 6,
    /**
     * @generated from protobuf enum value: CPU_SH = 7;
     */
    CPU_SH = 7,
    /**
     * @generated from protobuf enum value: CPU_MIPS = 8;
     */
    CPU_MIPS = 8,
    /**
     * @generated from protobuf enum value: CPU_BLACKFIN = 9;
     */
    CPU_BLACKFIN = 9
}
/**
 * @generated from protobuf enum spotify.Brand
 */
export enum Brand {
    /**
     * @generated from protobuf enum value: BRAND_UNBRANDED = 0;
     */
    UNBRANDED = 0,
    /**
     * @generated from protobuf enum value: BRAND_INQ = 1;
     */
    INQ = 1,
    /**
     * @generated from protobuf enum value: BRAND_HTC = 2;
     */
    HTC = 2,
    /**
     * @generated from protobuf enum value: BRAND_NOKIA = 3;
     */
    NOKIA = 3
}
/**
 * @generated from protobuf enum spotify.Os
 */
export enum Os {
    /**
     * @generated from protobuf enum value: OS_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: OS_WINDOWS = 1;
     */
    WINDOWS = 1,
    /**
     * @generated from protobuf enum value: OS_OSX = 2;
     */
    OSX = 2,
    /**
     * @generated from protobuf enum value: OS_IPHONE = 3;
     */
    IPHONE = 3,
    /**
     * @generated from protobuf enum value: OS_S60 = 4;
     */
    S60 = 4,
    /**
     * @generated from protobuf enum value: OS_LINUX = 5;
     */
    LINUX = 5,
    /**
     * @generated from protobuf enum value: OS_WINDOWS_CE = 6;
     */
    WINDOWS_CE = 6,
    /**
     * @generated from protobuf enum value: OS_ANDROID = 7;
     */
    ANDROID = 7,
    /**
     * @generated from protobuf enum value: OS_PALM = 8;
     */
    PALM = 8,
    /**
     * @generated from protobuf enum value: OS_FREEBSD = 9;
     */
    FREEBSD = 9,
    /**
     * @generated from protobuf enum value: OS_BLACKBERRY = 10;
     */
    BLACKBERRY = 10,
    /**
     * @generated from protobuf enum value: OS_SONOS = 11;
     */
    SONOS = 11,
    /**
     * @generated from protobuf enum value: OS_LOGITECH = 12;
     */
    LOGITECH = 12,
    /**
     * @generated from protobuf enum value: OS_WP7 = 13;
     */
    WP7 = 13,
    /**
     * @generated from protobuf enum value: OS_ONKYO = 14;
     */
    ONKYO = 14,
    /**
     * @generated from protobuf enum value: OS_PHILIPS = 15;
     */
    PHILIPS = 15,
    /**
     * @generated from protobuf enum value: OS_WD = 16;
     */
    WD = 16,
    /**
     * @generated from protobuf enum value: OS_VOLVO = 17;
     */
    VOLVO = 17,
    /**
     * @generated from protobuf enum value: OS_TIVO = 18;
     */
    TIVO = 18,
    /**
     * @generated from protobuf enum value: OS_AWOX = 19;
     */
    AWOX = 19,
    /**
     * @generated from protobuf enum value: OS_MEEGO = 20;
     */
    MEEGO = 20,
    /**
     * @generated from protobuf enum value: OS_QNXNTO = 21;
     */
    QNXNTO = 21,
    /**
     * @generated from protobuf enum value: OS_BCO = 22;
     */
    BCO = 22
}
/**
 * @generated from protobuf enum spotify.AccountType
 */
export enum AccountType {
    /**
     * @generated from protobuf enum value: Spotify = 0;
     */
    Spotify = 0,
    /**
     * @generated from protobuf enum value: Facebook = 1;
     */
    Facebook = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientResponseEncrypted$Type extends MessageType<ClientResponseEncrypted> {
    constructor() {
        super("spotify.ClientResponseEncrypted", [
            { no: 10, name: "login_credentials", kind: "message", T: () => LoginCredentials },
            { no: 20, name: "account_creation", kind: "enum", opt: true, T: () => ["spotify.AccountCreation", AccountCreation, "ACCOUNT_CREATION_"] },
            { no: 30, name: "fingerprint_response", kind: "message", T: () => FingerprintResponseUnion },
            { no: 40, name: "peer_ticket", kind: "message", T: () => PeerTicketUnion },
            { no: 50, name: "system_info", kind: "message", T: () => SystemInfo },
            { no: 60, name: "platform_model", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 70, name: "version_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 80, name: "appkey", kind: "message", T: () => LibspotifyAppKey },
            { no: 90, name: "client_info", kind: "message", T: () => ClientInfo }
        ]);
    }
    create(value?: PartialMessage<ClientResponseEncrypted>): ClientResponseEncrypted {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientResponseEncrypted>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientResponseEncrypted): ClientResponseEncrypted {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.LoginCredentials login_credentials */ 10:
                    message.loginCredentials = LoginCredentials.internalBinaryRead(reader, reader.uint32(), options, message.loginCredentials);
                    break;
                case /* optional spotify.AccountCreation account_creation */ 20:
                    message.accountCreation = reader.int32();
                    break;
                case /* optional spotify.FingerprintResponseUnion fingerprint_response */ 30:
                    message.fingerprintResponse = FingerprintResponseUnion.internalBinaryRead(reader, reader.uint32(), options, message.fingerprintResponse);
                    break;
                case /* optional spotify.PeerTicketUnion peer_ticket */ 40:
                    message.peerTicket = PeerTicketUnion.internalBinaryRead(reader, reader.uint32(), options, message.peerTicket);
                    break;
                case /* spotify.SystemInfo system_info */ 50:
                    message.systemInfo = SystemInfo.internalBinaryRead(reader, reader.uint32(), options, message.systemInfo);
                    break;
                case /* optional string platform_model */ 60:
                    message.platformModel = reader.string();
                    break;
                case /* optional string version_string */ 70:
                    message.versionString = reader.string();
                    break;
                case /* optional spotify.LibspotifyAppKey appkey */ 80:
                    message.appkey = LibspotifyAppKey.internalBinaryRead(reader, reader.uint32(), options, message.appkey);
                    break;
                case /* optional spotify.ClientInfo client_info */ 90:
                    message.clientInfo = ClientInfo.internalBinaryRead(reader, reader.uint32(), options, message.clientInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientResponseEncrypted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.LoginCredentials login_credentials = 10; */
        if (message.loginCredentials)
            LoginCredentials.internalBinaryWrite(message.loginCredentials, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.AccountCreation account_creation = 20; */
        if (message.accountCreation !== undefined)
            writer.tag(20, WireType.Varint).int32(message.accountCreation);
        /* optional spotify.FingerprintResponseUnion fingerprint_response = 30; */
        if (message.fingerprintResponse)
            FingerprintResponseUnion.internalBinaryWrite(message.fingerprintResponse, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.PeerTicketUnion peer_ticket = 40; */
        if (message.peerTicket)
            PeerTicketUnion.internalBinaryWrite(message.peerTicket, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* spotify.SystemInfo system_info = 50; */
        if (message.systemInfo)
            SystemInfo.internalBinaryWrite(message.systemInfo, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* optional string platform_model = 60; */
        if (message.platformModel !== undefined)
            writer.tag(60, WireType.LengthDelimited).string(message.platformModel);
        /* optional string version_string = 70; */
        if (message.versionString !== undefined)
            writer.tag(70, WireType.LengthDelimited).string(message.versionString);
        /* optional spotify.LibspotifyAppKey appkey = 80; */
        if (message.appkey)
            LibspotifyAppKey.internalBinaryWrite(message.appkey, writer.tag(80, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.ClientInfo client_info = 90; */
        if (message.clientInfo)
            ClientInfo.internalBinaryWrite(message.clientInfo, writer.tag(90, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.ClientResponseEncrypted
 */
export const ClientResponseEncrypted = new ClientResponseEncrypted$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginCredentials$Type extends MessageType<LoginCredentials> {
    constructor() {
        super("spotify.LoginCredentials", [
            { no: 10, name: "username", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "typ", kind: "enum", T: () => ["spotify.AuthenticationType", AuthenticationType] },
            { no: 30, name: "auth_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<LoginCredentials>): LoginCredentials {
        const message = { typ: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginCredentials): LoginCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string username */ 10:
                    message.username = reader.string();
                    break;
                case /* spotify.AuthenticationType typ */ 20:
                    message.typ = reader.int32();
                    break;
                case /* optional bytes auth_data */ 30:
                    message.authData = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string username = 10; */
        if (message.username !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.username);
        /* spotify.AuthenticationType typ = 20; */
        //if (message.typ !== 0)
            writer.tag(20, WireType.Varint).int32(message.typ);
        /* optional bytes auth_data = 30; */
        if (message.authData !== undefined)
            writer.tag(30, WireType.LengthDelimited).bytes(message.authData);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.LoginCredentials
 */
export const LoginCredentials = new LoginCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FingerprintResponseUnion$Type extends MessageType<FingerprintResponseUnion> {
    constructor() {
        super("spotify.FingerprintResponseUnion", [
            { no: 10, name: "grain", kind: "message", T: () => FingerprintGrainResponse },
            { no: 20, name: "hmac_ripemd", kind: "message", T: () => FingerprintHmacRipemdResponse }
        ]);
    }
    create(value?: PartialMessage<FingerprintResponseUnion>): FingerprintResponseUnion {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FingerprintResponseUnion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FingerprintResponseUnion): FingerprintResponseUnion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.FingerprintGrainResponse grain */ 10:
                    message.grain = FingerprintGrainResponse.internalBinaryRead(reader, reader.uint32(), options, message.grain);
                    break;
                case /* optional spotify.FingerprintHmacRipemdResponse hmac_ripemd */ 20:
                    message.hmacRipemd = FingerprintHmacRipemdResponse.internalBinaryRead(reader, reader.uint32(), options, message.hmacRipemd);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FingerprintResponseUnion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.FingerprintGrainResponse grain = 10; */
        if (message.grain)
            FingerprintGrainResponse.internalBinaryWrite(message.grain, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.FingerprintHmacRipemdResponse hmac_ripemd = 20; */
        if (message.hmacRipemd)
            FingerprintHmacRipemdResponse.internalBinaryWrite(message.hmacRipemd, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.FingerprintResponseUnion
 */
export const FingerprintResponseUnion = new FingerprintResponseUnion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FingerprintGrainResponse$Type extends MessageType<FingerprintGrainResponse> {
    constructor() {
        super("spotify.FingerprintGrainResponse", [
            { no: 10, name: "encrypted_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<FingerprintGrainResponse>): FingerprintGrainResponse {
        const message = { encryptedKey: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FingerprintGrainResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FingerprintGrainResponse): FingerprintGrainResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes encrypted_key */ 10:
                    message.encryptedKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FingerprintGrainResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes encrypted_key = 10; */
        if (message.encryptedKey.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.encryptedKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.FingerprintGrainResponse
 */
export const FingerprintGrainResponse = new FingerprintGrainResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FingerprintHmacRipemdResponse$Type extends MessageType<FingerprintHmacRipemdResponse> {
    constructor() {
        super("spotify.FingerprintHmacRipemdResponse", [
            { no: 10, name: "hmac", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<FingerprintHmacRipemdResponse>): FingerprintHmacRipemdResponse {
        const message = { hmac: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FingerprintHmacRipemdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FingerprintHmacRipemdResponse): FingerprintHmacRipemdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes hmac */ 10:
                    message.hmac = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FingerprintHmacRipemdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes hmac = 10; */
        if (message.hmac.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.hmac);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.FingerprintHmacRipemdResponse
 */
export const FingerprintHmacRipemdResponse = new FingerprintHmacRipemdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerTicketUnion$Type extends MessageType<PeerTicketUnion> {
    constructor() {
        super("spotify.PeerTicketUnion", [
            { no: 10, name: "public_key", kind: "message", T: () => PeerTicketPublicKey },
            { no: 20, name: "old_ticket", kind: "message", T: () => PeerTicketOld }
        ]);
    }
    create(value?: PartialMessage<PeerTicketUnion>): PeerTicketUnion {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeerTicketUnion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerTicketUnion): PeerTicketUnion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.PeerTicketPublicKey public_key */ 10:
                    message.publicKey = PeerTicketPublicKey.internalBinaryRead(reader, reader.uint32(), options, message.publicKey);
                    break;
                case /* optional spotify.PeerTicketOld old_ticket */ 20:
                    message.oldTicket = PeerTicketOld.internalBinaryRead(reader, reader.uint32(), options, message.oldTicket);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeerTicketUnion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.PeerTicketPublicKey public_key = 10; */
        if (message.publicKey)
            PeerTicketPublicKey.internalBinaryWrite(message.publicKey, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.PeerTicketOld old_ticket = 20; */
        if (message.oldTicket)
            PeerTicketOld.internalBinaryWrite(message.oldTicket, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.PeerTicketUnion
 */
export const PeerTicketUnion = new PeerTicketUnion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerTicketPublicKey$Type extends MessageType<PeerTicketPublicKey> {
    constructor() {
        super("spotify.PeerTicketPublicKey", [
            { no: 10, name: "public_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PeerTicketPublicKey>): PeerTicketPublicKey {
        const message = { publicKey: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeerTicketPublicKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerTicketPublicKey): PeerTicketPublicKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes public_key */ 10:
                    message.publicKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeerTicketPublicKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes public_key = 10; */
        if (message.publicKey.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.publicKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.PeerTicketPublicKey
 */
export const PeerTicketPublicKey = new PeerTicketPublicKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerTicketOld$Type extends MessageType<PeerTicketOld> {
    constructor() {
        super("spotify.PeerTicketOld", [
            { no: 10, name: "peer_ticket", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 20, name: "peer_ticket_signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PeerTicketOld>): PeerTicketOld {
        const message = { peerTicket: new Uint8Array(0), peerTicketSignature: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PeerTicketOld>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerTicketOld): PeerTicketOld {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes peer_ticket */ 10:
                    message.peerTicket = reader.bytes();
                    break;
                case /* bytes peer_ticket_signature */ 20:
                    message.peerTicketSignature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeerTicketOld, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes peer_ticket = 10; */
        if (message.peerTicket.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.peerTicket);
        /* bytes peer_ticket_signature = 20; */
        if (message.peerTicketSignature.length)
            writer.tag(20, WireType.LengthDelimited).bytes(message.peerTicketSignature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.PeerTicketOld
 */
export const PeerTicketOld = new PeerTicketOld$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SystemInfo$Type extends MessageType<SystemInfo> {
    constructor() {
        super("spotify.SystemInfo", [
            { no: 10, name: "cpu_family", kind: "enum", T: () => ["spotify.CpuFamily", CpuFamily] },
            { no: 20, name: "cpu_subtype", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 30, name: "cpu_ext", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 40, name: "brand", kind: "enum", opt: true, T: () => ["spotify.Brand", Brand, "BRAND_"] },
            { no: 50, name: "brand_flags", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 60, name: "os", kind: "enum", T: () => ["spotify.Os", Os, "OS_"] },
            { no: 70, name: "os_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 80, name: "os_ext", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 90, name: "system_information_string", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 100, name: "device_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SystemInfo>): SystemInfo {
        const message = { cpuFamily: 0, os: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SystemInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SystemInfo): SystemInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.CpuFamily cpu_family */ 10:
                    message.cpuFamily = reader.int32();
                    break;
                case /* optional uint32 cpu_subtype */ 20:
                    message.cpuSubtype = reader.uint32();
                    break;
                case /* optional uint32 cpu_ext */ 30:
                    message.cpuExt = reader.uint32();
                    break;
                case /* optional spotify.Brand brand */ 40:
                    message.brand = reader.int32();
                    break;
                case /* optional uint32 brand_flags */ 50:
                    message.brandFlags = reader.uint32();
                    break;
                case /* spotify.Os os */ 60:
                    message.os = reader.int32();
                    break;
                case /* optional uint32 os_version */ 70:
                    message.osVersion = reader.uint32();
                    break;
                case /* optional uint32 os_ext */ 80:
                    message.osExt = reader.uint32();
                    break;
                case /* optional string system_information_string */ 90:
                    message.systemInformationString = reader.string();
                    break;
                case /* optional string device_id */ 100:
                    message.deviceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SystemInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.CpuFamily cpu_family = 10; */
        if (message.cpuFamily !== 0)
            writer.tag(10, WireType.Varint).int32(message.cpuFamily);
        /* optional uint32 cpu_subtype = 20; */
        if (message.cpuSubtype !== undefined)
            writer.tag(20, WireType.Varint).uint32(message.cpuSubtype);
        /* optional uint32 cpu_ext = 30; */
        if (message.cpuExt !== undefined)
            writer.tag(30, WireType.Varint).uint32(message.cpuExt);
        /* optional spotify.Brand brand = 40; */
        if (message.brand !== undefined)
            writer.tag(40, WireType.Varint).int32(message.brand);
        /* optional uint32 brand_flags = 50; */
        if (message.brandFlags !== undefined)
            writer.tag(50, WireType.Varint).uint32(message.brandFlags);
        /* spotify.Os os = 60; */
        if (message.os !== 0)
            writer.tag(60, WireType.Varint).int32(message.os);
        /* optional uint32 os_version = 70; */
        if (message.osVersion !== undefined)
            writer.tag(70, WireType.Varint).uint32(message.osVersion);
        /* optional uint32 os_ext = 80; */
        if (message.osExt !== undefined)
            writer.tag(80, WireType.Varint).uint32(message.osExt);
        /* optional string system_information_string = 90; */
        if (message.systemInformationString !== undefined)
            writer.tag(90, WireType.LengthDelimited).string(message.systemInformationString);
        /* optional string device_id = 100; */
        if (message.deviceId !== undefined)
            writer.tag(100, WireType.LengthDelimited).string(message.deviceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.SystemInfo
 */
export const SystemInfo = new SystemInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LibspotifyAppKey$Type extends MessageType<LibspotifyAppKey> {
    constructor() {
        super("spotify.LibspotifyAppKey", [
            { no: 1, name: "version", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "devkey", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "useragent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "callback_hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<LibspotifyAppKey>): LibspotifyAppKey {
        const message = { version: 0, devkey: new Uint8Array(0), signature: new Uint8Array(0), useragent: "", callbackHash: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LibspotifyAppKey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LibspotifyAppKey): LibspotifyAppKey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 version */ 1:
                    message.version = reader.uint32();
                    break;
                case /* bytes devkey */ 2:
                    message.devkey = reader.bytes();
                    break;
                case /* bytes signature */ 3:
                    message.signature = reader.bytes();
                    break;
                case /* string useragent */ 4:
                    message.useragent = reader.string();
                    break;
                case /* bytes callback_hash */ 5:
                    message.callbackHash = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LibspotifyAppKey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 version = 1; */
        if (message.version !== 0)
            writer.tag(1, WireType.Varint).uint32(message.version);
        /* bytes devkey = 2; */
        if (message.devkey.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.devkey);
        /* bytes signature = 3; */
        if (message.signature.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.signature);
        /* string useragent = 4; */
        if (message.useragent !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.useragent);
        /* bytes callback_hash = 5; */
        if (message.callbackHash.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.callbackHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.LibspotifyAppKey
 */
export const LibspotifyAppKey = new LibspotifyAppKey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientInfo$Type extends MessageType<ClientInfo> {
    constructor() {
        super("spotify.ClientInfo", [
            { no: 1, name: "limited", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "fb", kind: "message", T: () => ClientInfoFacebook },
            { no: 3, name: "language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientInfo>): ClientInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientInfo): ClientInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool limited */ 1:
                    message.limited = reader.bool();
                    break;
                case /* optional spotify.ClientInfoFacebook fb */ 2:
                    message.fb = ClientInfoFacebook.internalBinaryRead(reader, reader.uint32(), options, message.fb);
                    break;
                case /* optional string language */ 3:
                    message.language = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool limited = 1; */
        if (message.limited !== undefined)
            writer.tag(1, WireType.Varint).bool(message.limited);
        /* optional spotify.ClientInfoFacebook fb = 2; */
        if (message.fb)
            ClientInfoFacebook.internalBinaryWrite(message.fb, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string language = 3; */
        if (message.language !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.language);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.ClientInfo
 */
export const ClientInfo = new ClientInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientInfoFacebook$Type extends MessageType<ClientInfoFacebook> {
    constructor() {
        super("spotify.ClientInfoFacebook", [
            { no: 1, name: "machine_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientInfoFacebook>): ClientInfoFacebook {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientInfoFacebook>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientInfoFacebook): ClientInfoFacebook {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string machine_id */ 1:
                    message.machineId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientInfoFacebook, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string machine_id = 1; */
        if (message.machineId !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.machineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.ClientInfoFacebook
 */
export const ClientInfoFacebook = new ClientInfoFacebook$Type();
// @generated message type with reflection information, may provide speed optimized methods
class APWelcome$Type extends MessageType<APWelcome> {
    constructor() {
        super("spotify.APWelcome", [
            { no: 10, name: "canonical_username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "account_type_logged_in", kind: "enum", T: () => ["spotify.AccountType", AccountType] },
            { no: 25, name: "credentials_type_logged_in", kind: "enum", T: () => ["spotify.AccountType", AccountType] },
            { no: 30, name: "reusable_auth_credentials_type", kind: "enum", T: () => ["spotify.AuthenticationType", AuthenticationType] },
            { no: 40, name: "reusable_auth_credentials", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 50, name: "lfs_secret", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 60, name: "account_info", kind: "message", T: () => AccountInfo },
            { no: 70, name: "fb", kind: "message", T: () => AccountInfoFacebook }
        ]);
    }
    create(value?: PartialMessage<APWelcome>): APWelcome {
        const message = { canonicalUsername: "", accountTypeLoggedIn: 0, credentialsTypeLoggedIn: 0, reusableAuthCredentialsType: 0, reusableAuthCredentials: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<APWelcome>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APWelcome): APWelcome {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string canonical_username */ 10:
                    message.canonicalUsername = reader.string();
                    break;
                case /* spotify.AccountType account_type_logged_in */ 20:
                    message.accountTypeLoggedIn = reader.int32();
                    break;
                case /* spotify.AccountType credentials_type_logged_in */ 25:
                    message.credentialsTypeLoggedIn = reader.int32();
                    break;
                case /* spotify.AuthenticationType reusable_auth_credentials_type */ 30:
                    message.reusableAuthCredentialsType = reader.int32();
                    break;
                case /* bytes reusable_auth_credentials */ 40:
                    message.reusableAuthCredentials = reader.bytes();
                    break;
                case /* optional bytes lfs_secret */ 50:
                    message.lfsSecret = reader.bytes();
                    break;
                case /* optional spotify.AccountInfo account_info */ 60:
                    message.accountInfo = AccountInfo.internalBinaryRead(reader, reader.uint32(), options, message.accountInfo);
                    break;
                case /* optional spotify.AccountInfoFacebook fb */ 70:
                    message.fb = AccountInfoFacebook.internalBinaryRead(reader, reader.uint32(), options, message.fb);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: APWelcome, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string canonical_username = 10; */
        if (message.canonicalUsername !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.canonicalUsername);
        /* spotify.AccountType account_type_logged_in = 20; */
        if (message.accountTypeLoggedIn !== 0)
            writer.tag(20, WireType.Varint).int32(message.accountTypeLoggedIn);
        /* spotify.AccountType credentials_type_logged_in = 25; */
        if (message.credentialsTypeLoggedIn !== 0)
            writer.tag(25, WireType.Varint).int32(message.credentialsTypeLoggedIn);
        /* spotify.AuthenticationType reusable_auth_credentials_type = 30; */
        if (message.reusableAuthCredentialsType !== 0)
            writer.tag(30, WireType.Varint).int32(message.reusableAuthCredentialsType);
        /* bytes reusable_auth_credentials = 40; */
        if (message.reusableAuthCredentials.length)
            writer.tag(40, WireType.LengthDelimited).bytes(message.reusableAuthCredentials);
        /* optional bytes lfs_secret = 50; */
        if (message.lfsSecret !== undefined)
            writer.tag(50, WireType.LengthDelimited).bytes(message.lfsSecret);
        /* optional spotify.AccountInfo account_info = 60; */
        if (message.accountInfo)
            AccountInfo.internalBinaryWrite(message.accountInfo, writer.tag(60, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.AccountInfoFacebook fb = 70; */
        if (message.fb)
            AccountInfoFacebook.internalBinaryWrite(message.fb, writer.tag(70, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.APWelcome
 */
export const APWelcome = new APWelcome$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountInfo$Type extends MessageType<AccountInfo> {
    constructor() {
        super("spotify.AccountInfo", [
            { no: 1, name: "spotify", kind: "message", T: () => AccountInfoSpotify },
            { no: 2, name: "facebook", kind: "message", T: () => AccountInfoFacebook }
        ]);
    }
    create(value?: PartialMessage<AccountInfo>): AccountInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AccountInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountInfo): AccountInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.AccountInfoSpotify spotify */ 1:
                    message.spotify = AccountInfoSpotify.internalBinaryRead(reader, reader.uint32(), options, message.spotify);
                    break;
                case /* optional spotify.AccountInfoFacebook facebook */ 2:
                    message.facebook = AccountInfoFacebook.internalBinaryRead(reader, reader.uint32(), options, message.facebook);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.AccountInfoSpotify spotify = 1; */
        if (message.spotify)
            AccountInfoSpotify.internalBinaryWrite(message.spotify, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.AccountInfoFacebook facebook = 2; */
        if (message.facebook)
            AccountInfoFacebook.internalBinaryWrite(message.facebook, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.AccountInfo
 */
export const AccountInfo = new AccountInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountInfoSpotify$Type extends MessageType<AccountInfoSpotify> {
    constructor() {
        super("spotify.AccountInfoSpotify", []);
    }
    create(value?: PartialMessage<AccountInfoSpotify>): AccountInfoSpotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AccountInfoSpotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountInfoSpotify): AccountInfoSpotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AccountInfoSpotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.AccountInfoSpotify
 */
export const AccountInfoSpotify = new AccountInfoSpotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AccountInfoFacebook$Type extends MessageType<AccountInfoFacebook> {
    constructor() {
        super("spotify.AccountInfoFacebook", [
            { no: 1, name: "access_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "machine_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AccountInfoFacebook>): AccountInfoFacebook {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AccountInfoFacebook>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountInfoFacebook): AccountInfoFacebook {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string access_token */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* optional string machine_id */ 2:
                    message.machineId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountInfoFacebook, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string access_token = 1; */
        if (message.accessToken !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* optional string machine_id = 2; */
        if (message.machineId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.machineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.AccountInfoFacebook
 */
export const AccountInfoFacebook = new AccountInfoFacebook$Type();
