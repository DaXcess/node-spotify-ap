// @generated by protobuf-ts 2.0.6
// @generated from protobuf file "keyexchange.proto" (package "spotify", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spotify.ClientHello
 */
export interface ClientHello {
    /**
     * @generated from protobuf field: spotify.BuildInfo build_info = 10;
     */
    buildInfo?: BuildInfo;
    /**
     * @generated from protobuf field: repeated spotify.Fingerprint fingerprints_supported = 20;
     */
    fingerprintsSupported: Fingerprint[];
    /**
     * @generated from protobuf field: repeated spotify.Cryptosuite cryptosuites_supported = 30;
     */
    cryptosuitesSupported: Cryptosuite[];
    /**
     * @generated from protobuf field: repeated spotify.Powscheme powschemes_supported = 40;
     */
    powschemesSupported: Powscheme[];
    /**
     * @generated from protobuf field: spotify.LoginCryptoHelloUnion login_crypto_hello = 50;
     */
    loginCryptoHello?: LoginCryptoHelloUnion;
    /**
     * @generated from protobuf field: bytes client_nonce = 60;
     */
    clientNonce: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes padding = 70;
     */
    padding?: Uint8Array;
    /**
     * @generated from protobuf field: optional spotify.FeatureSet feature_set = 80;
     */
    featureSet?: FeatureSet;
}
/**
 * @generated from protobuf message spotify.BuildInfo
 */
export interface BuildInfo {
    /**
     * @generated from protobuf field: spotify.Product product = 10;
     */
    product: Product;
    /**
     * @generated from protobuf field: repeated spotify.ProductFlags product_flags = 20;
     */
    productFlags: ProductFlags[];
    /**
     * @generated from protobuf field: spotify.Platform platform = 30;
     */
    platform: Platform;
    /**
     * @generated from protobuf field: uint64 version = 40;
     */
    version: bigint;
}
/**
 * @generated from protobuf message spotify.LoginCryptoHelloUnion
 */
export interface LoginCryptoHelloUnion {
    /**
     * @generated from protobuf field: optional spotify.LoginCryptoDiffieHellmanHello diffie_hellman = 10;
     */
    diffieHellman?: LoginCryptoDiffieHellmanHello;
}
/**
 * @generated from protobuf message spotify.LoginCryptoDiffieHellmanHello
 */
export interface LoginCryptoDiffieHellmanHello {
    /**
     * @generated from protobuf field: bytes gc = 10;
     */
    gc: Uint8Array;
    /**
     * @generated from protobuf field: uint32 server_keys_known = 20;
     */
    serverKeysKnown: number;
}
/**
 * @generated from protobuf message spotify.FeatureSet
 */
export interface FeatureSet {
    /**
     * @generated from protobuf field: optional bool autoupdate2 = 1;
     */
    autoupdate2?: boolean;
    /**
     * @generated from protobuf field: optional bool current_location = 2;
     */
    currentLocation?: boolean;
}
/**
 * @generated from protobuf message spotify.APResponseMessage
 */
export interface APResponseMessage {
    /**
     * @generated from protobuf field: optional spotify.APChallenge challenge = 10;
     */
    challenge?: APChallenge;
    /**
     * @generated from protobuf field: optional spotify.UpgradeRequiredMessage upgrade = 20;
     */
    upgrade?: UpgradeRequiredMessage;
    /**
     * @generated from protobuf field: optional spotify.APLoginFailed login_failed = 30;
     */
    loginFailed?: APLoginFailed;
}
/**
 * @generated from protobuf message spotify.APChallenge
 */
export interface APChallenge {
    /**
     * @generated from protobuf field: spotify.LoginCryptoChallengeUnion login_crypto_challenge = 10;
     */
    loginCryptoChallenge?: LoginCryptoChallengeUnion;
    /**
     * @generated from protobuf field: spotify.FingerprintChallengeUnion fingerprint_challenge = 20;
     */
    fingerprintChallenge?: FingerprintChallengeUnion;
    /**
     * @generated from protobuf field: spotify.PoWChallengeUnion pow_challenge = 30;
     */
    powChallenge?: PoWChallengeUnion;
    /**
     * @generated from protobuf field: spotify.CryptoChallengeUnion crypto_challenge = 40;
     */
    cryptoChallenge?: CryptoChallengeUnion;
    /**
     * @generated from protobuf field: bytes server_nonce = 50;
     */
    serverNonce: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes padding = 60;
     */
    padding?: Uint8Array;
}
/**
 * @generated from protobuf message spotify.LoginCryptoChallengeUnion
 */
export interface LoginCryptoChallengeUnion {
    /**
     * @generated from protobuf field: optional spotify.LoginCryptoDiffieHellmanChallenge diffie_hellman = 10;
     */
    diffieHellman?: LoginCryptoDiffieHellmanChallenge;
}
/**
 * @generated from protobuf message spotify.LoginCryptoDiffieHellmanChallenge
 */
export interface LoginCryptoDiffieHellmanChallenge {
    /**
     * @generated from protobuf field: bytes gs = 10;
     */
    gs: Uint8Array;
    /**
     * @generated from protobuf field: int32 server_signature_key = 20;
     */
    serverSignatureKey: number;
    /**
     * @generated from protobuf field: bytes gs_signature = 30;
     */
    gsSignature: Uint8Array;
}
/**
 * @generated from protobuf message spotify.FingerprintChallengeUnion
 */
export interface FingerprintChallengeUnion {
    /**
     * @generated from protobuf field: optional spotify.FingerprintGrainChallenge grain = 10;
     */
    grain?: FingerprintGrainChallenge;
    /**
     * @generated from protobuf field: optional spotify.FingerprintHmacRipemdChallenge hmac_ripemd = 20;
     */
    hmacRipemd?: FingerprintHmacRipemdChallenge;
}
/**
 * @generated from protobuf message spotify.FingerprintGrainChallenge
 */
export interface FingerprintGrainChallenge {
    /**
     * @generated from protobuf field: bytes kek = 10;
     */
    kek: Uint8Array;
}
/**
 * @generated from protobuf message spotify.FingerprintHmacRipemdChallenge
 */
export interface FingerprintHmacRipemdChallenge {
    /**
     * @generated from protobuf field: bytes challenge = 10;
     */
    challenge: Uint8Array;
}
/**
 * @generated from protobuf message spotify.PoWChallengeUnion
 */
export interface PoWChallengeUnion {
    /**
     * @generated from protobuf field: optional spotify.PoWHashCashChallenge hash_cash = 10;
     */
    hashCash?: PoWHashCashChallenge;
}
/**
 * @generated from protobuf message spotify.PoWHashCashChallenge
 */
export interface PoWHashCashChallenge {
    /**
     * @generated from protobuf field: optional bytes prefix = 10;
     */
    prefix?: Uint8Array;
    /**
     * @generated from protobuf field: optional int32 length = 20;
     */
    length?: number;
    /**
     * @generated from protobuf field: optional int32 target = 30;
     */
    target?: number;
}
/**
 * @generated from protobuf message spotify.CryptoChallengeUnion
 */
export interface CryptoChallengeUnion {
    /**
     * @generated from protobuf field: optional spotify.CryptoShannonChallenge shannon = 10;
     */
    shannon?: CryptoShannonChallenge;
    /**
     * @generated from protobuf field: optional spotify.CryptoRc4Sha1HmacChallenge rc4_sha1_hmac = 20;
     */
    rc4Sha1Hmac?: CryptoRc4Sha1HmacChallenge;
}
/**
 * @generated from protobuf message spotify.CryptoShannonChallenge
 */
export interface CryptoShannonChallenge {
}
/**
 * @generated from protobuf message spotify.CryptoRc4Sha1HmacChallenge
 */
export interface CryptoRc4Sha1HmacChallenge {
}
/**
 * @generated from protobuf message spotify.UpgradeRequiredMessage
 */
export interface UpgradeRequiredMessage {
    /**
     * @generated from protobuf field: bytes upgrade_signed_part = 10;
     */
    upgradeSignedPart: Uint8Array;
    /**
     * @generated from protobuf field: bytes signature = 20;
     */
    signature: Uint8Array;
    /**
     * @generated from protobuf field: optional string http_suffix = 30;
     */
    httpSuffix?: string;
}
/**
 * @generated from protobuf message spotify.APLoginFailed
 */
export interface APLoginFailed {
    /**
     * @generated from protobuf field: spotify.ErrorCode error_code = 10;
     */
    errorCode: ErrorCode;
    /**
     * @generated from protobuf field: optional int32 retry_delay = 20;
     */
    retryDelay?: number;
    /**
     * @generated from protobuf field: optional int32 expiry = 30;
     */
    expiry?: number;
    /**
     * @generated from protobuf field: optional string error_description = 40;
     */
    errorDescription?: string;
}
/**
 * @generated from protobuf message spotify.ClientResponsePlaintext
 */
export interface ClientResponsePlaintext {
    /**
     * @generated from protobuf field: spotify.LoginCryptoResponseUnion login_crypto_response = 10;
     */
    loginCryptoResponse?: LoginCryptoResponseUnion;
    /**
     * @generated from protobuf field: spotify.PoWResponseUnion pow_response = 20;
     */
    powResponse?: PoWResponseUnion;
    /**
     * @generated from protobuf field: spotify.CryptoResponseUnion crypto_response = 30;
     */
    cryptoResponse?: CryptoResponseUnion;
}
/**
 * @generated from protobuf message spotify.LoginCryptoResponseUnion
 */
export interface LoginCryptoResponseUnion {
    /**
     * @generated from protobuf field: optional spotify.LoginCryptoDiffieHellmanResponse diffie_hellman = 10;
     */
    diffieHellman?: LoginCryptoDiffieHellmanResponse;
}
/**
 * @generated from protobuf message spotify.LoginCryptoDiffieHellmanResponse
 */
export interface LoginCryptoDiffieHellmanResponse {
    /**
     * @generated from protobuf field: bytes hmac = 10;
     */
    hmac: Uint8Array;
}
/**
 * @generated from protobuf message spotify.PoWResponseUnion
 */
export interface PoWResponseUnion {
    /**
     * @generated from protobuf field: optional spotify.PoWHashCashResponse hash_cash = 10;
     */
    hashCash?: PoWHashCashResponse;
}
/**
 * @generated from protobuf message spotify.PoWHashCashResponse
 */
export interface PoWHashCashResponse {
    /**
     * @generated from protobuf field: bytes hash_suffix = 10;
     */
    hashSuffix: Uint8Array;
}
/**
 * @generated from protobuf message spotify.CryptoResponseUnion
 */
export interface CryptoResponseUnion {
    /**
     * @generated from protobuf field: optional spotify.CryptoShannonResponse shannon = 10;
     */
    shannon?: CryptoShannonResponse;
    /**
     * @generated from protobuf field: optional spotify.CryptoRc4Sha1HmacResponse rc4_sha1_hmac = 20;
     */
    rc4Sha1Hmac?: CryptoRc4Sha1HmacResponse;
}
/**
 * @generated from protobuf message spotify.CryptoShannonResponse
 */
export interface CryptoShannonResponse {
    /**
     * @generated from protobuf field: optional int32 dummy = 1;
     */
    dummy?: number;
}
/**
 * @generated from protobuf message spotify.CryptoRc4Sha1HmacResponse
 */
export interface CryptoRc4Sha1HmacResponse {
    /**
     * @generated from protobuf field: optional int32 dummy = 1;
     */
    dummy?: number;
}
/**
 * @generated from protobuf enum spotify.Product
 */
export enum Product {
    /**
     * @generated from protobuf enum value: PRODUCT_CLIENT = 0;
     */
    CLIENT = 0,
    /**
     * @generated from protobuf enum value: PRODUCT_LIBSPOTIFY = 1;
     */
    LIBSPOTIFY = 1,
    /**
     * @generated from protobuf enum value: PRODUCT_MOBILE = 2;
     */
    MOBILE = 2,
    /**
     * @generated from protobuf enum value: PRODUCT_PARTNER = 3;
     */
    PARTNER = 3,
    /**
     * @generated from protobuf enum value: PRODUCT_LIBSPOTIFY_EMBEDDED = 5;
     */
    LIBSPOTIFY_EMBEDDED = 5
}
/**
 * @generated from protobuf enum spotify.ProductFlags
 */
export enum ProductFlags {
    /**
     * @generated from protobuf enum value: PRODUCT_FLAG_NONE = 0;
     */
    PRODUCT_FLAG_NONE = 0,
    /**
     * @generated from protobuf enum value: PRODUCT_FLAG_DEV_BUILD = 1;
     */
    PRODUCT_FLAG_DEV_BUILD = 1
}
/**
 * @generated from protobuf enum spotify.Platform
 */
export enum Platform {
    /**
     * @generated from protobuf enum value: PLATFORM_WIN32_X86 = 0;
     */
    WIN32_X86 = 0,
    /**
     * @generated from protobuf enum value: PLATFORM_OSX_X86 = 1;
     */
    OSX_X86 = 1,
    /**
     * @generated from protobuf enum value: PLATFORM_LINUX_X86 = 2;
     */
    LINUX_X86 = 2,
    /**
     * @generated from protobuf enum value: PLATFORM_IPHONE_ARM = 3;
     */
    IPHONE_ARM = 3,
    /**
     * @generated from protobuf enum value: PLATFORM_S60_ARM = 4;
     */
    S60_ARM = 4,
    /**
     * @generated from protobuf enum value: PLATFORM_OSX_PPC = 5;
     */
    OSX_PPC = 5,
    /**
     * @generated from protobuf enum value: PLATFORM_ANDROID_ARM = 6;
     */
    ANDROID_ARM = 6,
    /**
     * @generated from protobuf enum value: PLATFORM_WINDOWS_CE_ARM = 7;
     */
    WINDOWS_CE_ARM = 7,
    /**
     * @generated from protobuf enum value: PLATFORM_LINUX_X86_64 = 8;
     */
    LINUX_X86_64 = 8,
    /**
     * @generated from protobuf enum value: PLATFORM_OSX_X86_64 = 9;
     */
    OSX_X86_64 = 9,
    /**
     * @generated from protobuf enum value: PLATFORM_PALM_ARM = 10;
     */
    PALM_ARM = 10,
    /**
     * @generated from protobuf enum value: PLATFORM_LINUX_SH = 11;
     */
    LINUX_SH = 11,
    /**
     * @generated from protobuf enum value: PLATFORM_FREEBSD_X86 = 12;
     */
    FREEBSD_X86 = 12,
    /**
     * @generated from protobuf enum value: PLATFORM_FREEBSD_X86_64 = 13;
     */
    FREEBSD_X86_64 = 13,
    /**
     * @generated from protobuf enum value: PLATFORM_BLACKBERRY_ARM = 14;
     */
    BLACKBERRY_ARM = 14,
    /**
     * @generated from protobuf enum value: PLATFORM_SONOS = 15;
     */
    SONOS = 15,
    /**
     * @generated from protobuf enum value: PLATFORM_LINUX_MIPS = 16;
     */
    LINUX_MIPS = 16,
    /**
     * @generated from protobuf enum value: PLATFORM_LINUX_ARM = 17;
     */
    LINUX_ARM = 17,
    /**
     * @generated from protobuf enum value: PLATFORM_LOGITECH_ARM = 18;
     */
    LOGITECH_ARM = 18,
    /**
     * @generated from protobuf enum value: PLATFORM_LINUX_BLACKFIN = 19;
     */
    LINUX_BLACKFIN = 19,
    /**
     * @generated from protobuf enum value: PLATFORM_WP7_ARM = 20;
     */
    WP7_ARM = 20,
    /**
     * @generated from protobuf enum value: PLATFORM_ONKYO_ARM = 21;
     */
    ONKYO_ARM = 21,
    /**
     * @generated from protobuf enum value: PLATFORM_QNXNTO_ARM = 22;
     */
    QNXNTO_ARM = 22,
    /**
     * @generated from protobuf enum value: PLATFORM_BCO_ARM = 23;
     */
    BCO_ARM = 23
}
/**
 * @generated from protobuf enum spotify.Fingerprint
 */
export enum Fingerprint {
    /**
     * @generated from protobuf enum value: FINGERPRINT_GRAIN = 0;
     */
    GRAIN = 0,
    /**
     * @generated from protobuf enum value: FINGERPRINT_HMAC_RIPEMD = 1;
     */
    HMAC_RIPEMD = 1
}
/**
 * @generated from protobuf enum spotify.Cryptosuite
 */
export enum Cryptosuite {
    /**
     * @generated from protobuf enum value: CRYPTO_SUITE_SHANNON = 0;
     */
    CRYPTO_SUITE_SHANNON = 0,
    /**
     * @generated from protobuf enum value: CRYPTO_SUITE_RC4_SHA1_HMAC = 1;
     */
    CRYPTO_SUITE_RC4_SHA1_HMAC = 1
}
/**
 * @generated from protobuf enum spotify.Powscheme
 */
export enum Powscheme {
    /**
     * @generated from protobuf enum value: POW_HASH_CASH = 0;
     */
    POW_HASH_CASH = 0
}
/**
 * @generated from protobuf enum spotify.ErrorCode
 */
export enum ErrorCode {
    /**
     * @generated from protobuf enum value: ProtocolError = 0;
     */
    ProtocolError = 0,
    /**
     * @generated from protobuf enum value: TryAnotherAP = 2;
     */
    TryAnotherAP = 2,
    /**
     * @generated from protobuf enum value: BadConnectionId = 5;
     */
    BadConnectionId = 5,
    /**
     * @generated from protobuf enum value: TravelRestriction = 9;
     */
    TravelRestriction = 9,
    /**
     * @generated from protobuf enum value: PremiumAccountRequired = 11;
     */
    PremiumAccountRequired = 11,
    /**
     * @generated from protobuf enum value: BadCredentials = 12;
     */
    BadCredentials = 12,
    /**
     * @generated from protobuf enum value: CouldNotValidateCredentials = 13;
     */
    CouldNotValidateCredentials = 13,
    /**
     * @generated from protobuf enum value: AccountExists = 14;
     */
    AccountExists = 14,
    /**
     * @generated from protobuf enum value: ExtraVerificationRequired = 15;
     */
    ExtraVerificationRequired = 15,
    /**
     * @generated from protobuf enum value: InvalidAppKey = 16;
     */
    InvalidAppKey = 16,
    /**
     * @generated from protobuf enum value: ApplicationBanned = 17;
     */
    ApplicationBanned = 17
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientHello$Type extends MessageType<ClientHello> {
    constructor() {
        super("spotify.ClientHello", [
            { no: 10, name: "build_info", kind: "message", T: () => BuildInfo },
            { no: 20, name: "fingerprints_supported", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["spotify.Fingerprint", Fingerprint, "FINGERPRINT_"] },
            { no: 30, name: "cryptosuites_supported", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["spotify.Cryptosuite", Cryptosuite] },
            { no: 40, name: "powschemes_supported", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["spotify.Powscheme", Powscheme] },
            { no: 50, name: "login_crypto_hello", kind: "message", T: () => LoginCryptoHelloUnion },
            { no: 60, name: "client_nonce", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 70, name: "padding", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 80, name: "feature_set", kind: "message", T: () => FeatureSet }
        ]);
    }
    create(value?: PartialMessage<ClientHello>): ClientHello {
        const message = { fingerprintsSupported: [], cryptosuitesSupported: [], powschemesSupported: [], clientNonce: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientHello>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientHello): ClientHello {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.BuildInfo build_info */ 10:
                    message.buildInfo = BuildInfo.internalBinaryRead(reader, reader.uint32(), options, message.buildInfo);
                    break;
                case /* repeated spotify.Fingerprint fingerprints_supported */ 20:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fingerprintsSupported.push(reader.int32());
                    else
                        message.fingerprintsSupported.push(reader.int32());
                    break;
                case /* repeated spotify.Cryptosuite cryptosuites_supported */ 30:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.cryptosuitesSupported.push(reader.int32());
                    else
                        message.cryptosuitesSupported.push(reader.int32());
                    break;
                case /* repeated spotify.Powscheme powschemes_supported */ 40:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.powschemesSupported.push(reader.int32());
                    else
                        message.powschemesSupported.push(reader.int32());
                    break;
                case /* spotify.LoginCryptoHelloUnion login_crypto_hello */ 50:
                    message.loginCryptoHello = LoginCryptoHelloUnion.internalBinaryRead(reader, reader.uint32(), options, message.loginCryptoHello);
                    break;
                case /* bytes client_nonce */ 60:
                    message.clientNonce = reader.bytes();
                    break;
                case /* optional bytes padding */ 70:
                    message.padding = reader.bytes();
                    break;
                case /* optional spotify.FeatureSet feature_set */ 80:
                    message.featureSet = FeatureSet.internalBinaryRead(reader, reader.uint32(), options, message.featureSet);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientHello, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.BuildInfo build_info = 10; */
        if (message.buildInfo)
            BuildInfo.internalBinaryWrite(message.buildInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated spotify.Fingerprint fingerprints_supported = 20; */
        for (let i = 0; i < message.fingerprintsSupported.length; i++)
            writer.tag(20, WireType.Varint).int32(message.fingerprintsSupported[i]);
        /* repeated spotify.Cryptosuite cryptosuites_supported = 30; */
        for (let i = 0; i < message.cryptosuitesSupported.length; i++)
            writer.tag(30, WireType.Varint).int32(message.cryptosuitesSupported[i]);
        /* repeated spotify.Powscheme powschemes_supported = 40; */
        for (let i = 0; i < message.powschemesSupported.length; i++)
            writer.tag(40, WireType.Varint).int32(message.powschemesSupported[i]);
        /* spotify.LoginCryptoHelloUnion login_crypto_hello = 50; */
        if (message.loginCryptoHello)
            LoginCryptoHelloUnion.internalBinaryWrite(message.loginCryptoHello, writer.tag(50, WireType.LengthDelimited).fork(), options).join();
        /* bytes client_nonce = 60; */
        if (message.clientNonce.length)
            writer.tag(60, WireType.LengthDelimited).bytes(message.clientNonce);
        /* optional bytes padding = 70; */
        if (message.padding !== undefined)
            writer.tag(70, WireType.LengthDelimited).bytes(message.padding);
        /* optional spotify.FeatureSet feature_set = 80; */
        if (message.featureSet)
            FeatureSet.internalBinaryWrite(message.featureSet, writer.tag(80, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.ClientHello
 */
export const ClientHello = new ClientHello$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuildInfo$Type extends MessageType<BuildInfo> {
    constructor() {
        super("spotify.BuildInfo", [
            { no: 10, name: "product", kind: "enum", T: () => ["spotify.Product", Product, "PRODUCT_"] },
            { no: 20, name: "product_flags", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["spotify.ProductFlags", ProductFlags] },
            { no: 30, name: "platform", kind: "enum", T: () => ["spotify.Platform", Platform, "PLATFORM_"] },
            { no: 40, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<BuildInfo>): BuildInfo {
        const message = { product: 0, productFlags: [], platform: 0, version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuildInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuildInfo): BuildInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.Product product */ 10:
                    message.product = reader.int32();
                    break;
                case /* repeated spotify.ProductFlags product_flags */ 20:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.productFlags.push(reader.int32());
                    else
                        message.productFlags.push(reader.int32());
                    break;
                case /* spotify.Platform platform */ 30:
                    message.platform = reader.int32();
                    break;
                case /* uint64 version */ 40:
                    message.version = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuildInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.Product product = 10; */
        //if (message.product !== 0)
            writer.tag(10, WireType.Varint).int32(message.product);
        /* repeated spotify.ProductFlags product_flags = 20; */
        for (let i = 0; i < message.productFlags.length; i++)
            writer.tag(20, WireType.Varint).int32(message.productFlags[i]);
        /* spotify.Platform platform = 30; */
        if (message.platform !== 0)
            writer.tag(30, WireType.Varint).int32(message.platform);
        /* uint64 version = 40; */
        if (message.version !== 0n)
            writer.tag(40, WireType.Varint).uint64(message.version);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.BuildInfo
 */
export const BuildInfo = new BuildInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginCryptoHelloUnion$Type extends MessageType<LoginCryptoHelloUnion> {
    constructor() {
        super("spotify.LoginCryptoHelloUnion", [
            { no: 10, name: "diffie_hellman", kind: "message", T: () => LoginCryptoDiffieHellmanHello }
        ]);
    }
    create(value?: PartialMessage<LoginCryptoHelloUnion>): LoginCryptoHelloUnion {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginCryptoHelloUnion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginCryptoHelloUnion): LoginCryptoHelloUnion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.LoginCryptoDiffieHellmanHello diffie_hellman */ 10:
                    message.diffieHellman = LoginCryptoDiffieHellmanHello.internalBinaryRead(reader, reader.uint32(), options, message.diffieHellman);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginCryptoHelloUnion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.LoginCryptoDiffieHellmanHello diffie_hellman = 10; */
        if (message.diffieHellman)
            LoginCryptoDiffieHellmanHello.internalBinaryWrite(message.diffieHellman, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.LoginCryptoHelloUnion
 */
export const LoginCryptoHelloUnion = new LoginCryptoHelloUnion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginCryptoDiffieHellmanHello$Type extends MessageType<LoginCryptoDiffieHellmanHello> {
    constructor() {
        super("spotify.LoginCryptoDiffieHellmanHello", [
            { no: 10, name: "gc", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 20, name: "server_keys_known", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LoginCryptoDiffieHellmanHello>): LoginCryptoDiffieHellmanHello {
        const message = { gc: new Uint8Array(0), serverKeysKnown: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginCryptoDiffieHellmanHello>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginCryptoDiffieHellmanHello): LoginCryptoDiffieHellmanHello {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes gc */ 10:
                    message.gc = reader.bytes();
                    break;
                case /* uint32 server_keys_known */ 20:
                    message.serverKeysKnown = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginCryptoDiffieHellmanHello, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes gc = 10; */
        if (message.gc.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.gc);
        /* uint32 server_keys_known = 20; */
        if (message.serverKeysKnown !== 0)
            writer.tag(20, WireType.Varint).uint32(message.serverKeysKnown);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.LoginCryptoDiffieHellmanHello
 */
export const LoginCryptoDiffieHellmanHello = new LoginCryptoDiffieHellmanHello$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeatureSet$Type extends MessageType<FeatureSet> {
    constructor() {
        super("spotify.FeatureSet", [
            { no: 1, name: "autoupdate2", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "current_location", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FeatureSet>): FeatureSet {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FeatureSet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeatureSet): FeatureSet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool autoupdate2 */ 1:
                    message.autoupdate2 = reader.bool();
                    break;
                case /* optional bool current_location */ 2:
                    message.currentLocation = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeatureSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool autoupdate2 = 1; */
        if (message.autoupdate2 !== undefined)
            writer.tag(1, WireType.Varint).bool(message.autoupdate2);
        /* optional bool current_location = 2; */
        if (message.currentLocation !== undefined)
            writer.tag(2, WireType.Varint).bool(message.currentLocation);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.FeatureSet
 */
export const FeatureSet = new FeatureSet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class APResponseMessage$Type extends MessageType<APResponseMessage> {
    constructor() {
        super("spotify.APResponseMessage", [
            { no: 10, name: "challenge", kind: "message", T: () => APChallenge },
            { no: 20, name: "upgrade", kind: "message", T: () => UpgradeRequiredMessage },
            { no: 30, name: "login_failed", kind: "message", T: () => APLoginFailed }
        ]);
    }
    create(value?: PartialMessage<APResponseMessage>): APResponseMessage {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<APResponseMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APResponseMessage): APResponseMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.APChallenge challenge */ 10:
                    message.challenge = APChallenge.internalBinaryRead(reader, reader.uint32(), options, message.challenge);
                    break;
                case /* optional spotify.UpgradeRequiredMessage upgrade */ 20:
                    message.upgrade = UpgradeRequiredMessage.internalBinaryRead(reader, reader.uint32(), options, message.upgrade);
                    break;
                case /* optional spotify.APLoginFailed login_failed */ 30:
                    message.loginFailed = APLoginFailed.internalBinaryRead(reader, reader.uint32(), options, message.loginFailed);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: APResponseMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.APChallenge challenge = 10; */
        if (message.challenge)
            APChallenge.internalBinaryWrite(message.challenge, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.UpgradeRequiredMessage upgrade = 20; */
        if (message.upgrade)
            UpgradeRequiredMessage.internalBinaryWrite(message.upgrade, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.APLoginFailed login_failed = 30; */
        if (message.loginFailed)
            APLoginFailed.internalBinaryWrite(message.loginFailed, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.APResponseMessage
 */
export const APResponseMessage = new APResponseMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class APChallenge$Type extends MessageType<APChallenge> {
    constructor() {
        super("spotify.APChallenge", [
            { no: 10, name: "login_crypto_challenge", kind: "message", T: () => LoginCryptoChallengeUnion },
            { no: 20, name: "fingerprint_challenge", kind: "message", T: () => FingerprintChallengeUnion },
            { no: 30, name: "pow_challenge", kind: "message", T: () => PoWChallengeUnion },
            { no: 40, name: "crypto_challenge", kind: "message", T: () => CryptoChallengeUnion },
            { no: 50, name: "server_nonce", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 60, name: "padding", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<APChallenge>): APChallenge {
        const message = { serverNonce: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<APChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APChallenge): APChallenge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.LoginCryptoChallengeUnion login_crypto_challenge */ 10:
                    message.loginCryptoChallenge = LoginCryptoChallengeUnion.internalBinaryRead(reader, reader.uint32(), options, message.loginCryptoChallenge);
                    break;
                case /* spotify.FingerprintChallengeUnion fingerprint_challenge */ 20:
                    message.fingerprintChallenge = FingerprintChallengeUnion.internalBinaryRead(reader, reader.uint32(), options, message.fingerprintChallenge);
                    break;
                case /* spotify.PoWChallengeUnion pow_challenge */ 30:
                    message.powChallenge = PoWChallengeUnion.internalBinaryRead(reader, reader.uint32(), options, message.powChallenge);
                    break;
                case /* spotify.CryptoChallengeUnion crypto_challenge */ 40:
                    message.cryptoChallenge = CryptoChallengeUnion.internalBinaryRead(reader, reader.uint32(), options, message.cryptoChallenge);
                    break;
                case /* bytes server_nonce */ 50:
                    message.serverNonce = reader.bytes();
                    break;
                case /* optional bytes padding */ 60:
                    message.padding = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: APChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.LoginCryptoChallengeUnion login_crypto_challenge = 10; */
        if (message.loginCryptoChallenge)
            LoginCryptoChallengeUnion.internalBinaryWrite(message.loginCryptoChallenge, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* spotify.FingerprintChallengeUnion fingerprint_challenge = 20; */
        if (message.fingerprintChallenge)
            FingerprintChallengeUnion.internalBinaryWrite(message.fingerprintChallenge, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* spotify.PoWChallengeUnion pow_challenge = 30; */
        if (message.powChallenge)
            PoWChallengeUnion.internalBinaryWrite(message.powChallenge, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        /* spotify.CryptoChallengeUnion crypto_challenge = 40; */
        if (message.cryptoChallenge)
            CryptoChallengeUnion.internalBinaryWrite(message.cryptoChallenge, writer.tag(40, WireType.LengthDelimited).fork(), options).join();
        /* bytes server_nonce = 50; */
        if (message.serverNonce.length)
            writer.tag(50, WireType.LengthDelimited).bytes(message.serverNonce);
        /* optional bytes padding = 60; */
        if (message.padding !== undefined)
            writer.tag(60, WireType.LengthDelimited).bytes(message.padding);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.APChallenge
 */
export const APChallenge = new APChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginCryptoChallengeUnion$Type extends MessageType<LoginCryptoChallengeUnion> {
    constructor() {
        super("spotify.LoginCryptoChallengeUnion", [
            { no: 10, name: "diffie_hellman", kind: "message", T: () => LoginCryptoDiffieHellmanChallenge }
        ]);
    }
    create(value?: PartialMessage<LoginCryptoChallengeUnion>): LoginCryptoChallengeUnion {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginCryptoChallengeUnion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginCryptoChallengeUnion): LoginCryptoChallengeUnion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.LoginCryptoDiffieHellmanChallenge diffie_hellman */ 10:
                    message.diffieHellman = LoginCryptoDiffieHellmanChallenge.internalBinaryRead(reader, reader.uint32(), options, message.diffieHellman);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginCryptoChallengeUnion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.LoginCryptoDiffieHellmanChallenge diffie_hellman = 10; */
        if (message.diffieHellman)
            LoginCryptoDiffieHellmanChallenge.internalBinaryWrite(message.diffieHellman, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.LoginCryptoChallengeUnion
 */
export const LoginCryptoChallengeUnion = new LoginCryptoChallengeUnion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginCryptoDiffieHellmanChallenge$Type extends MessageType<LoginCryptoDiffieHellmanChallenge> {
    constructor() {
        super("spotify.LoginCryptoDiffieHellmanChallenge", [
            { no: 10, name: "gs", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 20, name: "server_signature_key", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 30, name: "gs_signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<LoginCryptoDiffieHellmanChallenge>): LoginCryptoDiffieHellmanChallenge {
        const message = { gs: new Uint8Array(0), serverSignatureKey: 0, gsSignature: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginCryptoDiffieHellmanChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginCryptoDiffieHellmanChallenge): LoginCryptoDiffieHellmanChallenge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes gs */ 10:
                    message.gs = reader.bytes();
                    break;
                case /* int32 server_signature_key */ 20:
                    message.serverSignatureKey = reader.int32();
                    break;
                case /* bytes gs_signature */ 30:
                    message.gsSignature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginCryptoDiffieHellmanChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes gs = 10; */
        if (message.gs.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.gs);
        /* int32 server_signature_key = 20; */
        if (message.serverSignatureKey !== 0)
            writer.tag(20, WireType.Varint).int32(message.serverSignatureKey);
        /* bytes gs_signature = 30; */
        if (message.gsSignature.length)
            writer.tag(30, WireType.LengthDelimited).bytes(message.gsSignature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.LoginCryptoDiffieHellmanChallenge
 */
export const LoginCryptoDiffieHellmanChallenge = new LoginCryptoDiffieHellmanChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FingerprintChallengeUnion$Type extends MessageType<FingerprintChallengeUnion> {
    constructor() {
        super("spotify.FingerprintChallengeUnion", [
            { no: 10, name: "grain", kind: "message", T: () => FingerprintGrainChallenge },
            { no: 20, name: "hmac_ripemd", kind: "message", T: () => FingerprintHmacRipemdChallenge }
        ]);
    }
    create(value?: PartialMessage<FingerprintChallengeUnion>): FingerprintChallengeUnion {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FingerprintChallengeUnion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FingerprintChallengeUnion): FingerprintChallengeUnion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.FingerprintGrainChallenge grain */ 10:
                    message.grain = FingerprintGrainChallenge.internalBinaryRead(reader, reader.uint32(), options, message.grain);
                    break;
                case /* optional spotify.FingerprintHmacRipemdChallenge hmac_ripemd */ 20:
                    message.hmacRipemd = FingerprintHmacRipemdChallenge.internalBinaryRead(reader, reader.uint32(), options, message.hmacRipemd);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FingerprintChallengeUnion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.FingerprintGrainChallenge grain = 10; */
        if (message.grain)
            FingerprintGrainChallenge.internalBinaryWrite(message.grain, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.FingerprintHmacRipemdChallenge hmac_ripemd = 20; */
        if (message.hmacRipemd)
            FingerprintHmacRipemdChallenge.internalBinaryWrite(message.hmacRipemd, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.FingerprintChallengeUnion
 */
export const FingerprintChallengeUnion = new FingerprintChallengeUnion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FingerprintGrainChallenge$Type extends MessageType<FingerprintGrainChallenge> {
    constructor() {
        super("spotify.FingerprintGrainChallenge", [
            { no: 10, name: "kek", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<FingerprintGrainChallenge>): FingerprintGrainChallenge {
        const message = { kek: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FingerprintGrainChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FingerprintGrainChallenge): FingerprintGrainChallenge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes kek */ 10:
                    message.kek = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FingerprintGrainChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes kek = 10; */
        if (message.kek.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.kek);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.FingerprintGrainChallenge
 */
export const FingerprintGrainChallenge = new FingerprintGrainChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FingerprintHmacRipemdChallenge$Type extends MessageType<FingerprintHmacRipemdChallenge> {
    constructor() {
        super("spotify.FingerprintHmacRipemdChallenge", [
            { no: 10, name: "challenge", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<FingerprintHmacRipemdChallenge>): FingerprintHmacRipemdChallenge {
        const message = { challenge: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FingerprintHmacRipemdChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FingerprintHmacRipemdChallenge): FingerprintHmacRipemdChallenge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes challenge */ 10:
                    message.challenge = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FingerprintHmacRipemdChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes challenge = 10; */
        if (message.challenge.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.challenge);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.FingerprintHmacRipemdChallenge
 */
export const FingerprintHmacRipemdChallenge = new FingerprintHmacRipemdChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoWChallengeUnion$Type extends MessageType<PoWChallengeUnion> {
    constructor() {
        super("spotify.PoWChallengeUnion", [
            { no: 10, name: "hash_cash", kind: "message", T: () => PoWHashCashChallenge }
        ]);
    }
    create(value?: PartialMessage<PoWChallengeUnion>): PoWChallengeUnion {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PoWChallengeUnion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PoWChallengeUnion): PoWChallengeUnion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.PoWHashCashChallenge hash_cash */ 10:
                    message.hashCash = PoWHashCashChallenge.internalBinaryRead(reader, reader.uint32(), options, message.hashCash);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PoWChallengeUnion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.PoWHashCashChallenge hash_cash = 10; */
        if (message.hashCash)
            PoWHashCashChallenge.internalBinaryWrite(message.hashCash, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.PoWChallengeUnion
 */
export const PoWChallengeUnion = new PoWChallengeUnion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoWHashCashChallenge$Type extends MessageType<PoWHashCashChallenge> {
    constructor() {
        super("spotify.PoWHashCashChallenge", [
            { no: 10, name: "prefix", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 20, name: "length", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 30, name: "target", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PoWHashCashChallenge>): PoWHashCashChallenge {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PoWHashCashChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PoWHashCashChallenge): PoWHashCashChallenge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes prefix */ 10:
                    message.prefix = reader.bytes();
                    break;
                case /* optional int32 length */ 20:
                    message.length = reader.int32();
                    break;
                case /* optional int32 target */ 30:
                    message.target = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PoWHashCashChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes prefix = 10; */
        if (message.prefix !== undefined)
            writer.tag(10, WireType.LengthDelimited).bytes(message.prefix);
        /* optional int32 length = 20; */
        if (message.length !== undefined)
            writer.tag(20, WireType.Varint).int32(message.length);
        /* optional int32 target = 30; */
        if (message.target !== undefined)
            writer.tag(30, WireType.Varint).int32(message.target);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.PoWHashCashChallenge
 */
export const PoWHashCashChallenge = new PoWHashCashChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CryptoChallengeUnion$Type extends MessageType<CryptoChallengeUnion> {
    constructor() {
        super("spotify.CryptoChallengeUnion", [
            { no: 10, name: "shannon", kind: "message", T: () => CryptoShannonChallenge },
            { no: 20, name: "rc4_sha1_hmac", kind: "message", T: () => CryptoRc4Sha1HmacChallenge }
        ]);
    }
    create(value?: PartialMessage<CryptoChallengeUnion>): CryptoChallengeUnion {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CryptoChallengeUnion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CryptoChallengeUnion): CryptoChallengeUnion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.CryptoShannonChallenge shannon */ 10:
                    message.shannon = CryptoShannonChallenge.internalBinaryRead(reader, reader.uint32(), options, message.shannon);
                    break;
                case /* optional spotify.CryptoRc4Sha1HmacChallenge rc4_sha1_hmac */ 20:
                    message.rc4Sha1Hmac = CryptoRc4Sha1HmacChallenge.internalBinaryRead(reader, reader.uint32(), options, message.rc4Sha1Hmac);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CryptoChallengeUnion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.CryptoShannonChallenge shannon = 10; */
        if (message.shannon)
            CryptoShannonChallenge.internalBinaryWrite(message.shannon, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.CryptoRc4Sha1HmacChallenge rc4_sha1_hmac = 20; */
        if (message.rc4Sha1Hmac)
            CryptoRc4Sha1HmacChallenge.internalBinaryWrite(message.rc4Sha1Hmac, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.CryptoChallengeUnion
 */
export const CryptoChallengeUnion = new CryptoChallengeUnion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CryptoShannonChallenge$Type extends MessageType<CryptoShannonChallenge> {
    constructor() {
        super("spotify.CryptoShannonChallenge", []);
    }
    create(value?: PartialMessage<CryptoShannonChallenge>): CryptoShannonChallenge {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CryptoShannonChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CryptoShannonChallenge): CryptoShannonChallenge {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CryptoShannonChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.CryptoShannonChallenge
 */
export const CryptoShannonChallenge = new CryptoShannonChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CryptoRc4Sha1HmacChallenge$Type extends MessageType<CryptoRc4Sha1HmacChallenge> {
    constructor() {
        super("spotify.CryptoRc4Sha1HmacChallenge", []);
    }
    create(value?: PartialMessage<CryptoRc4Sha1HmacChallenge>): CryptoRc4Sha1HmacChallenge {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CryptoRc4Sha1HmacChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CryptoRc4Sha1HmacChallenge): CryptoRc4Sha1HmacChallenge {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CryptoRc4Sha1HmacChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.CryptoRc4Sha1HmacChallenge
 */
export const CryptoRc4Sha1HmacChallenge = new CryptoRc4Sha1HmacChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpgradeRequiredMessage$Type extends MessageType<UpgradeRequiredMessage> {
    constructor() {
        super("spotify.UpgradeRequiredMessage", [
            { no: 10, name: "upgrade_signed_part", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 20, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 30, name: "http_suffix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpgradeRequiredMessage>): UpgradeRequiredMessage {
        const message = { upgradeSignedPart: new Uint8Array(0), signature: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpgradeRequiredMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpgradeRequiredMessage): UpgradeRequiredMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes upgrade_signed_part */ 10:
                    message.upgradeSignedPart = reader.bytes();
                    break;
                case /* bytes signature */ 20:
                    message.signature = reader.bytes();
                    break;
                case /* optional string http_suffix */ 30:
                    message.httpSuffix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpgradeRequiredMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes upgrade_signed_part = 10; */
        if (message.upgradeSignedPart.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.upgradeSignedPart);
        /* bytes signature = 20; */
        if (message.signature.length)
            writer.tag(20, WireType.LengthDelimited).bytes(message.signature);
        /* optional string http_suffix = 30; */
        if (message.httpSuffix !== undefined)
            writer.tag(30, WireType.LengthDelimited).string(message.httpSuffix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.UpgradeRequiredMessage
 */
export const UpgradeRequiredMessage = new UpgradeRequiredMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class APLoginFailed$Type extends MessageType<APLoginFailed> {
    constructor() {
        super("spotify.APLoginFailed", [
            { no: 10, name: "error_code", kind: "enum", T: () => ["spotify.ErrorCode", ErrorCode] },
            { no: 20, name: "retry_delay", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 30, name: "expiry", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 40, name: "error_description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<APLoginFailed>): APLoginFailed {
        const message = { errorCode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<APLoginFailed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLoginFailed): APLoginFailed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.ErrorCode error_code */ 10:
                    message.errorCode = reader.int32();
                    break;
                case /* optional int32 retry_delay */ 20:
                    message.retryDelay = reader.int32();
                    break;
                case /* optional int32 expiry */ 30:
                    message.expiry = reader.int32();
                    break;
                case /* optional string error_description */ 40:
                    message.errorDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: APLoginFailed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.ErrorCode error_code = 10; */
        if (message.errorCode !== 0)
            writer.tag(10, WireType.Varint).int32(message.errorCode);
        /* optional int32 retry_delay = 20; */
        if (message.retryDelay !== undefined)
            writer.tag(20, WireType.Varint).int32(message.retryDelay);
        /* optional int32 expiry = 30; */
        if (message.expiry !== undefined)
            writer.tag(30, WireType.Varint).int32(message.expiry);
        /* optional string error_description = 40; */
        if (message.errorDescription !== undefined)
            writer.tag(40, WireType.LengthDelimited).string(message.errorDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.APLoginFailed
 */
export const APLoginFailed = new APLoginFailed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientResponsePlaintext$Type extends MessageType<ClientResponsePlaintext> {
    constructor() {
        super("spotify.ClientResponsePlaintext", [
            { no: 10, name: "login_crypto_response", kind: "message", T: () => LoginCryptoResponseUnion },
            { no: 20, name: "pow_response", kind: "message", T: () => PoWResponseUnion },
            { no: 30, name: "crypto_response", kind: "message", T: () => CryptoResponseUnion }
        ]);
    }
    create(value?: PartialMessage<ClientResponsePlaintext>): ClientResponsePlaintext {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientResponsePlaintext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientResponsePlaintext): ClientResponsePlaintext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spotify.LoginCryptoResponseUnion login_crypto_response */ 10:
                    message.loginCryptoResponse = LoginCryptoResponseUnion.internalBinaryRead(reader, reader.uint32(), options, message.loginCryptoResponse);
                    break;
                case /* spotify.PoWResponseUnion pow_response */ 20:
                    message.powResponse = PoWResponseUnion.internalBinaryRead(reader, reader.uint32(), options, message.powResponse);
                    break;
                case /* spotify.CryptoResponseUnion crypto_response */ 30:
                    message.cryptoResponse = CryptoResponseUnion.internalBinaryRead(reader, reader.uint32(), options, message.cryptoResponse);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientResponsePlaintext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spotify.LoginCryptoResponseUnion login_crypto_response = 10; */
        if (message.loginCryptoResponse)
            LoginCryptoResponseUnion.internalBinaryWrite(message.loginCryptoResponse, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* spotify.PoWResponseUnion pow_response = 20; */
        if (message.powResponse)
            PoWResponseUnion.internalBinaryWrite(message.powResponse, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* spotify.CryptoResponseUnion crypto_response = 30; */
        if (message.cryptoResponse)
            CryptoResponseUnion.internalBinaryWrite(message.cryptoResponse, writer.tag(30, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.ClientResponsePlaintext
 */
export const ClientResponsePlaintext = new ClientResponsePlaintext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginCryptoResponseUnion$Type extends MessageType<LoginCryptoResponseUnion> {
    constructor() {
        super("spotify.LoginCryptoResponseUnion", [
            { no: 10, name: "diffie_hellman", kind: "message", T: () => LoginCryptoDiffieHellmanResponse }
        ]);
    }
    create(value?: PartialMessage<LoginCryptoResponseUnion>): LoginCryptoResponseUnion {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginCryptoResponseUnion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginCryptoResponseUnion): LoginCryptoResponseUnion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.LoginCryptoDiffieHellmanResponse diffie_hellman */ 10:
                    message.diffieHellman = LoginCryptoDiffieHellmanResponse.internalBinaryRead(reader, reader.uint32(), options, message.diffieHellman);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginCryptoResponseUnion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.LoginCryptoDiffieHellmanResponse diffie_hellman = 10; */
        if (message.diffieHellman)
            LoginCryptoDiffieHellmanResponse.internalBinaryWrite(message.diffieHellman, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.LoginCryptoResponseUnion
 */
export const LoginCryptoResponseUnion = new LoginCryptoResponseUnion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginCryptoDiffieHellmanResponse$Type extends MessageType<LoginCryptoDiffieHellmanResponse> {
    constructor() {
        super("spotify.LoginCryptoDiffieHellmanResponse", [
            { no: 10, name: "hmac", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<LoginCryptoDiffieHellmanResponse>): LoginCryptoDiffieHellmanResponse {
        const message = { hmac: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginCryptoDiffieHellmanResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginCryptoDiffieHellmanResponse): LoginCryptoDiffieHellmanResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes hmac */ 10:
                    message.hmac = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginCryptoDiffieHellmanResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes hmac = 10; */
        if (message.hmac.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.hmac);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.LoginCryptoDiffieHellmanResponse
 */
export const LoginCryptoDiffieHellmanResponse = new LoginCryptoDiffieHellmanResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoWResponseUnion$Type extends MessageType<PoWResponseUnion> {
    constructor() {
        super("spotify.PoWResponseUnion", [
            { no: 10, name: "hash_cash", kind: "message", T: () => PoWHashCashResponse }
        ]);
    }
    create(value?: PartialMessage<PoWResponseUnion>): PoWResponseUnion {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PoWResponseUnion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PoWResponseUnion): PoWResponseUnion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.PoWHashCashResponse hash_cash */ 10:
                    message.hashCash = PoWHashCashResponse.internalBinaryRead(reader, reader.uint32(), options, message.hashCash);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PoWResponseUnion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.PoWHashCashResponse hash_cash = 10; */
        if (message.hashCash)
            PoWHashCashResponse.internalBinaryWrite(message.hashCash, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.PoWResponseUnion
 */
export const PoWResponseUnion = new PoWResponseUnion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PoWHashCashResponse$Type extends MessageType<PoWHashCashResponse> {
    constructor() {
        super("spotify.PoWHashCashResponse", [
            { no: 10, name: "hash_suffix", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PoWHashCashResponse>): PoWHashCashResponse {
        const message = { hashSuffix: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PoWHashCashResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PoWHashCashResponse): PoWHashCashResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes hash_suffix */ 10:
                    message.hashSuffix = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PoWHashCashResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes hash_suffix = 10; */
        if (message.hashSuffix.length)
            writer.tag(10, WireType.LengthDelimited).bytes(message.hashSuffix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.PoWHashCashResponse
 */
export const PoWHashCashResponse = new PoWHashCashResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CryptoResponseUnion$Type extends MessageType<CryptoResponseUnion> {
    constructor() {
        super("spotify.CryptoResponseUnion", [
            { no: 10, name: "shannon", kind: "message", T: () => CryptoShannonResponse },
            { no: 20, name: "rc4_sha1_hmac", kind: "message", T: () => CryptoRc4Sha1HmacResponse }
        ]);
    }
    create(value?: PartialMessage<CryptoResponseUnion>): CryptoResponseUnion {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CryptoResponseUnion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CryptoResponseUnion): CryptoResponseUnion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional spotify.CryptoShannonResponse shannon */ 10:
                    message.shannon = CryptoShannonResponse.internalBinaryRead(reader, reader.uint32(), options, message.shannon);
                    break;
                case /* optional spotify.CryptoRc4Sha1HmacResponse rc4_sha1_hmac */ 20:
                    message.rc4Sha1Hmac = CryptoRc4Sha1HmacResponse.internalBinaryRead(reader, reader.uint32(), options, message.rc4Sha1Hmac);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CryptoResponseUnion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional spotify.CryptoShannonResponse shannon = 10; */
        if (message.shannon)
            CryptoShannonResponse.internalBinaryWrite(message.shannon, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional spotify.CryptoRc4Sha1HmacResponse rc4_sha1_hmac = 20; */
        if (message.rc4Sha1Hmac)
            CryptoRc4Sha1HmacResponse.internalBinaryWrite(message.rc4Sha1Hmac, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.CryptoResponseUnion
 */
export const CryptoResponseUnion = new CryptoResponseUnion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CryptoShannonResponse$Type extends MessageType<CryptoShannonResponse> {
    constructor() {
        super("spotify.CryptoShannonResponse", [
            { no: 1, name: "dummy", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CryptoShannonResponse>): CryptoShannonResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CryptoShannonResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CryptoShannonResponse): CryptoShannonResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 dummy */ 1:
                    message.dummy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CryptoShannonResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 dummy = 1; */
        if (message.dummy !== undefined)
            writer.tag(1, WireType.Varint).int32(message.dummy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.CryptoShannonResponse
 */
export const CryptoShannonResponse = new CryptoShannonResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CryptoRc4Sha1HmacResponse$Type extends MessageType<CryptoRc4Sha1HmacResponse> {
    constructor() {
        super("spotify.CryptoRc4Sha1HmacResponse", [
            { no: 1, name: "dummy", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CryptoRc4Sha1HmacResponse>): CryptoRc4Sha1HmacResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CryptoRc4Sha1HmacResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CryptoRc4Sha1HmacResponse): CryptoRc4Sha1HmacResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 dummy */ 1:
                    message.dummy = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CryptoRc4Sha1HmacResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 dummy = 1; */
        if (message.dummy !== undefined)
            writer.tag(1, WireType.Varint).int32(message.dummy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.CryptoRc4Sha1HmacResponse
 */
export const CryptoRc4Sha1HmacResponse = new CryptoRc4Sha1HmacResponse$Type();
