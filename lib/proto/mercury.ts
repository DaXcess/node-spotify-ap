// @generated by protobuf-ts 2.0.6
// @generated from protobuf file "mercury.proto" (package "spotify", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message spotify.MercuryMultiGetRequest
 */
export interface MercuryMultiGetRequest {
    /**
     * @generated from protobuf field: repeated spotify.MercuryRequest request = 1;
     */
    request: MercuryRequest[];
}
/**
 * @generated from protobuf message spotify.MercuryMultiGetReply
 */
export interface MercuryMultiGetReply {
    /**
     * @generated from protobuf field: repeated spotify.MercuryReply reply = 1;
     */
    reply: MercuryReply[];
}
/**
 * @generated from protobuf message spotify.MercuryRequest
 */
export interface MercuryRequest {
    /**
     * @generated from protobuf field: optional string uri = 1;
     */
    uri?: string;
    /**
     * @generated from protobuf field: optional string content_type = 2;
     */
    contentType?: string;
    /**
     * @generated from protobuf field: optional bytes body = 3;
     */
    body?: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes etag = 4;
     */
    etag?: Uint8Array;
}
/**
 * @generated from protobuf message spotify.MercuryReply
 */
export interface MercuryReply {
    /**
     * @generated from protobuf field: optional sint32 status_code = 1;
     */
    statusCode?: number;
    /**
     * @generated from protobuf field: optional string status_message = 2;
     */
    statusMessage?: string;
    /**
     * @generated from protobuf field: optional spotify.MercuryReply.CachePolicy cache_policy = 3;
     */
    cachePolicy?: MercuryReply_CachePolicy;
    /**
     * @generated from protobuf field: optional sint32 ttl = 4;
     */
    ttl?: number;
    /**
     * @generated from protobuf field: optional bytes etag = 5;
     */
    etag?: Uint8Array;
    /**
     * @generated from protobuf field: optional string content_type = 6;
     */
    contentType?: string;
    /**
     * @generated from protobuf field: optional bytes body = 7;
     */
    body?: Uint8Array;
}
/**
 * @generated from protobuf enum spotify.MercuryReply.CachePolicy
 */
export enum MercuryReply_CachePolicy {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * @generated from protobuf enum value: CACHE_NO = 1;
     */
    CACHE_NO = 1,
    /**
     * @generated from protobuf enum value: CACHE_PRIVATE = 2;
     */
    CACHE_PRIVATE = 2,
    /**
     * @generated from protobuf enum value: CACHE_PUBLIC = 3;
     */
    CACHE_PUBLIC = 3
}
/**
 * @generated from protobuf message spotify.Header
 */
export interface Header {
    /**
     * @generated from protobuf field: optional string uri = 1;
     */
    uri?: string;
    /**
     * @generated from protobuf field: optional string content_type = 2;
     */
    contentType?: string;
    /**
     * @generated from protobuf field: optional string method = 3;
     */
    method?: string;
    /**
     * @generated from protobuf field: optional sint32 status_code = 4;
     */
    statusCode?: number;
    /**
     * @generated from protobuf field: repeated spotify.UserField user_fields = 6;
     */
    userFields: UserField[];
}
/**
 * @generated from protobuf message spotify.UserField
 */
export interface UserField {
    /**
     * @generated from protobuf field: optional string key = 1;
     */
    key?: string;
    /**
     * @generated from protobuf field: optional bytes value = 2;
     */
    value?: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class MercuryMultiGetRequest$Type extends MessageType<MercuryMultiGetRequest> {
    constructor() {
        super("spotify.MercuryMultiGetRequest", [
            { no: 1, name: "request", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MercuryRequest }
        ]);
    }
    create(value?: PartialMessage<MercuryMultiGetRequest>): MercuryMultiGetRequest {
        const message = { request: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MercuryMultiGetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MercuryMultiGetRequest): MercuryMultiGetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated spotify.MercuryRequest request */ 1:
                    message.request.push(MercuryRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MercuryMultiGetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated spotify.MercuryRequest request = 1; */
        for (let i = 0; i < message.request.length; i++)
            MercuryRequest.internalBinaryWrite(message.request[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.MercuryMultiGetRequest
 */
export const MercuryMultiGetRequest = new MercuryMultiGetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MercuryMultiGetReply$Type extends MessageType<MercuryMultiGetReply> {
    constructor() {
        super("spotify.MercuryMultiGetReply", [
            { no: 1, name: "reply", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MercuryReply }
        ]);
    }
    create(value?: PartialMessage<MercuryMultiGetReply>): MercuryMultiGetReply {
        const message = { reply: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MercuryMultiGetReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MercuryMultiGetReply): MercuryMultiGetReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated spotify.MercuryReply reply */ 1:
                    message.reply.push(MercuryReply.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MercuryMultiGetReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated spotify.MercuryReply reply = 1; */
        for (let i = 0; i < message.reply.length; i++)
            MercuryReply.internalBinaryWrite(message.reply[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.MercuryMultiGetReply
 */
export const MercuryMultiGetReply = new MercuryMultiGetReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MercuryRequest$Type extends MessageType<MercuryRequest> {
    constructor() {
        super("spotify.MercuryRequest", [
            { no: 1, name: "uri", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "body", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "etag", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<MercuryRequest>): MercuryRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MercuryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MercuryRequest): MercuryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string uri */ 1:
                    message.uri = reader.string();
                    break;
                case /* optional string content_type */ 2:
                    message.contentType = reader.string();
                    break;
                case /* optional bytes body */ 3:
                    message.body = reader.bytes();
                    break;
                case /* optional bytes etag */ 4:
                    message.etag = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MercuryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string uri = 1; */
        if (message.uri !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.uri);
        /* optional string content_type = 2; */
        if (message.contentType !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.contentType);
        /* optional bytes body = 3; */
        if (message.body !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.body);
        /* optional bytes etag = 4; */
        if (message.etag !== undefined)
            writer.tag(4, WireType.LengthDelimited).bytes(message.etag);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.MercuryRequest
 */
export const MercuryRequest = new MercuryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MercuryReply$Type extends MessageType<MercuryReply> {
    constructor() {
        super("spotify.MercuryReply", [
            { no: 1, name: "status_code", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 2, name: "status_message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cache_policy", kind: "enum", opt: true, T: () => ["spotify.MercuryReply.CachePolicy", MercuryReply_CachePolicy] },
            { no: 4, name: "ttl", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 5, name: "etag", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "content_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "body", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<MercuryReply>): MercuryReply {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MercuryReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MercuryReply): MercuryReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional sint32 status_code */ 1:
                    message.statusCode = reader.sint32();
                    break;
                case /* optional string status_message */ 2:
                    message.statusMessage = reader.string();
                    break;
                case /* optional spotify.MercuryReply.CachePolicy cache_policy */ 3:
                    message.cachePolicy = reader.int32();
                    break;
                case /* optional sint32 ttl */ 4:
                    message.ttl = reader.sint32();
                    break;
                case /* optional bytes etag */ 5:
                    message.etag = reader.bytes();
                    break;
                case /* optional string content_type */ 6:
                    message.contentType = reader.string();
                    break;
                case /* optional bytes body */ 7:
                    message.body = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MercuryReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional sint32 status_code = 1; */
        if (message.statusCode !== undefined)
            writer.tag(1, WireType.Varint).sint32(message.statusCode);
        /* optional string status_message = 2; */
        if (message.statusMessage !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.statusMessage);
        /* optional spotify.MercuryReply.CachePolicy cache_policy = 3; */
        if (message.cachePolicy !== undefined)
            writer.tag(3, WireType.Varint).int32(message.cachePolicy);
        /* optional sint32 ttl = 4; */
        if (message.ttl !== undefined)
            writer.tag(4, WireType.Varint).sint32(message.ttl);
        /* optional bytes etag = 5; */
        if (message.etag !== undefined)
            writer.tag(5, WireType.LengthDelimited).bytes(message.etag);
        /* optional string content_type = 6; */
        if (message.contentType !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.contentType);
        /* optional bytes body = 7; */
        if (message.body !== undefined)
            writer.tag(7, WireType.LengthDelimited).bytes(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.MercuryReply
 */
export const MercuryReply = new MercuryReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Header$Type extends MessageType<Header> {
    constructor() {
        super("spotify.Header", [
            { no: 1, name: "uri", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "method", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "status_code", kind: "scalar", opt: true, T: 17 /*ScalarType.SINT32*/ },
            { no: 6, name: "user_fields", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UserField }
        ]);
    }
    create(value?: PartialMessage<Header>): Header {
        const message = { userFields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Header>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Header): Header {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string uri */ 1:
                    message.uri = reader.string();
                    break;
                case /* optional string content_type */ 2:
                    message.contentType = reader.string();
                    break;
                case /* optional string method */ 3:
                    message.method = reader.string();
                    break;
                case /* optional sint32 status_code */ 4:
                    message.statusCode = reader.sint32();
                    break;
                case /* repeated spotify.UserField user_fields */ 6:
                    message.userFields.push(UserField.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Header, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string uri = 1; */
        if (message.uri !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.uri);
        /* optional string content_type = 2; */
        if (message.contentType !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.contentType);
        /* optional string method = 3; */
        if (message.method !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.method);
        /* optional sint32 status_code = 4; */
        if (message.statusCode !== undefined)
            writer.tag(4, WireType.Varint).sint32(message.statusCode);
        /* repeated spotify.UserField user_fields = 6; */
        for (let i = 0; i < message.userFields.length; i++)
            UserField.internalBinaryWrite(message.userFields[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.Header
 */
export const Header = new Header$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserField$Type extends MessageType<UserField> {
    constructor() {
        super("spotify.UserField", [
            { no: 1, name: "key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UserField>): UserField {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserField>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserField): UserField {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string key */ 1:
                    message.key = reader.string();
                    break;
                case /* optional bytes value */ 2:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserField, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string key = 1; */
        if (message.key !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* optional bytes value = 2; */
        if (message.value !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spotify.UserField
 */
export const UserField = new UserField$Type();
